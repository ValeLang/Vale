// Extra string stuff
fn println(s StrSlice) void {
    println(s.str());
}
fn print(s StrSlice) void {
    print(s.str());
}
fn !=(a str, b StrSlice) bool { a.slice() != b }
fn !=(a StrSlice, b str) bool { a != b.slice() }
fn !=(a StrSlice, b StrSlice) bool {
  vstr_eq(a.string, a.begin, a.end, b.string, b.begin, b.end) == false
}
fn ==(a str, b str) bool {
    = vstr_eq(a, 0, len(a), b, 0, len(b));
}
//


// Extra List stuff
fn slice<T>(list &List<T>, begin int) List<T> {
    = list.slice<T>(begin, list.len());
}
fn slice<T>(list &List<T>, begin int, end int) List<T> {
    newList = List<T>();
    i = begin;
    while (i < end) {
        newList.add(list.get(i).get());
        mut i = i + 1;
    }    
    = newList;
}
//

// Extra List stuff

fn clear<E>(list &List<E>) void { 
    i = 0;
    while (i < list.len()) {
        list.set(i, None<E>());
        mut i = i + 1;
    }
    mut list.size = 0;
}

//