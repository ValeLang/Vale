import stdlib.collections.hashset.*;
import stdlib.testsuite.*;
import stdlib.stringutils.*;
import stdlib.math.*;

struct Ship {
  fuel int;
}

func +(s str, sett &HashSet<int, IntHasher, IntEquator>) str {
  combined = StringBuilder();
  combined.print(s);
  combined.print("[");

  first = true;
  foreach x in sett {
    if not first {
      combined.print(", ");
    }
    combined.print(x);
    set first = false;
  }

  combined.print("]");

  return combined.str();
}

exported func main() {
  suite = TestSuite();

  suite.test("Basic hash set", {
    sett = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
    sett.add(39);
    sett.add(42);
    sett.add(51);
    sett.contains(42) should_equal true;
    sett.contains(43) should_equal false;
    sett.len() should_equal 3;
  });

  suite.test("Hash set remove", {
    sett = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
    sett.add(39);
    sett.add(42);
    sett.add(51);
    sett.remove(42);

    sett.contains(39) should_equal true;
    sett.contains(42) should_equal false;
    sett.contains(51) should_equal true;
    sett.len() should_equal 2;
  });

  //suite.test("Hash set remove something not there", {
  //  sett = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
  //  sett.add(39);
  //  sett.add(42);
  //  sett.add(51);
  //  sett.remove(73);
  //  sett.len() should_equal 3;
  //});

  suite.test("hash set equal", {
    a = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
    a.add(39);
    a.add(42);
    a.add(51);
    a.add(72);
    b = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
    b.add(39);
    b.add(42);
    b.add(51);

    &a should_not_equal &b;

    b.add(72);

    &a should_equal &b;
  });

  suite.test("hash set diff", {
    a = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
    a.add(39);
    a.add(42);
    a.add(51);
    a.add(72);
    b = HashSet<int, IntHasher, IntEquator>(IntHasher(), IntEquator());
    b.add(39);
    b.add(47);
    b.add(51);
    diff = (&diff_iter(&a, &b)).List();

    diff.contains(42) should_equal true;
    diff.contains(72) should_equal true;
    diff.len() should_equal 2;
  });

  (suite).finish();
}
