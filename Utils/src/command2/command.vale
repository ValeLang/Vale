import stdlib.stringutils.*;
import stdlib.path.*;
import stdlib.collections.hashmap.*;
import stdlib.os.*;

export Array<imm, str> as StrArray;
export Array<mut, str> as MutStrArray;

struct Subprocess {
  command str;
  handle i64;
}


struct SubprocessBuilder {
  maybe_working_dir Opt<str>;
  env_vars HashMap<str, str, StrHasher, StrEquator>;
  program Opt<str>;
  args List<str>;
}
func SubprocessBuilder() SubprocessBuilder {
  SubprocessBuilder(
      None<str>(),
      HashMap<str, str, StrHasher, StrEquator>(StrHasher(), StrEquator()),
      None<str>(),
      List<str>())
}
func WithProgram(self SubprocessBuilder, program str) SubprocessBuilder {
  [maybe_working_dir, env_vars, old_program, args] = self;
  vassert(old_program.isEmpty(), "SubprocessBuilder specified program twice!");
  return SubprocessBuilder(maybe_working_dir, env_vars, Some(program), args);
}
func WithProgramAndArgs(self SubprocessBuilder, command str) SubprocessBuilder {
  parts = command.split(" ");
  program = str(parts.get(0));
  args = List<str>();
  foreach [index, arg] in parts.entries() {
    if index != 0 {
      args.add(arg.str());
    }
  }
  return (self).WithProgram(program).WithArgs(&args);
}
func FromDir(self SubprocessBuilder, maybe_working_dir str) SubprocessBuilder {
  [old_maybe_working_dir, env_vars, program, args] = self;
  vassert(old_maybe_working_dir.isEmpty(), "SubprocessBuilder specified working dir twice!");
  return SubprocessBuilder(Some(maybe_working_dir), env_vars, program, args);
}
func WithEnvVar(self SubprocessBuilder, var_name str, value str) SubprocessBuilder {
  self.env_vars.add(var_name, value);
  return self;
}
func WithArg(self SubprocessBuilder, arg str) SubprocessBuilder {
  self.args.add(str);
  return self;
}
func WithArgs(self SubprocessBuilder, args &List<str>) SubprocessBuilder {
  foreach arg in args {
    self.args.add(arg);
  }
  return self;
}
func Build(self SubprocessBuilder) Result<Subprocess, str> {
  [maybe_working_dir, env_vars, program, args] = self;
  vassert(not program.isEmpty(), "Called SubprocessBuilder.Build without specifying program!");
  vassert(env_vars.len() == 0, "Subprocess env vars not supported yet.");
  return Subprocess(program.get(), &args, maybe_working_dir);
}

func Subprocess(relative_program str, args &List<str>, maybe_cwd_str Opt<str>) Result<Subprocess, str> {

  paths = get_env_var("PATH").split(":");


  maybe_program_path = FindProgramInPath(relative_program);


  if maybe_program_path.isEmpty() {
    panic("Unable to find program {relative_program}.");
  }
  program_path = (maybe_program_path).get();
  if not program_path.is_file() {
    panic("Unable to execute {relative_program}, is not a file.");
  }


  command_str_builder = StringBuilder();
  command_str_builder.PrintCommandLinePart(program_path.str().slice());


  cmdlist = List<str>();
  cmdlist.add(program_path.str());
  foreach arg in args {
    command_str_builder.print(" ");
    command_str_builder.PrintCommandLinePart(arg.slice());
    cmdlist.add(arg);
  }

  command_str = command_str_builder.str();

  cmd_array = cmdlist.toImmArray();

  cwd_resolved_str_maybe_empty =
      if maybe_cwd_str.isEmpty() {
        ""
      } else {
        Path(maybe_cwd_str.get()).str()
      };

  handle = launch_command(cmd_array, cwd_resolved_str_maybe_empty);
  if handle == 0i64 {
    return Err<Subprocess, str>("Failed to create command!");
  }

  retval = Subprocess(command_str, handle);
  return Ok<Subprocess, str>(retval);
}

func FindProgramInPath(relative_program str) Opt<Path> {
  path_env_var = get_env_var("PATH");
  path_strs = path_env_var.split(GetEnvPathSeparator());

  maybe_found_program_path Opt<Path> = None<Path>();
  if Path(relative_program).exists() {
    set maybe_found_program_path = Some(Path(relative_program));
  } else {
    i = 0;
    while i < path_strs.len() and maybe_found_program_path.isEmpty() {
      path_str = path_strs.get(i);
      if path_str.len() > 0 {
        possible_program_path = Path(path_str.str())./(relative_program);
        if possible_program_path.exists() {
          set maybe_found_program_path = Some(possible_program_path.clone());
        }
      }
      set i = i + 1;
    }
  }

  return maybe_found_program_path;
}

func PrintCommandLinePart(builder &StringBuilder, part StrSlice) {
  if part.contains(" ") {
    builder.print("\"");
    builder.print(part.replaceAll("\"", "\\\""));
    builder.print("\"");
  } else {
    builder.print(part);
  }
}

func consume_and_join<StdoutConsumer, StderrConsumer>(
  self Subprocess,
  stdout_consumer StdoutConsumer,
  stderr_consumer StderrConsumer)
int {
  close_stdin(self.handle);


  running = true;
  while running {

    stdout_consumed_anything = false;
    stdout_consuming = true;
    while stdout_consuming {
      s = self.read_stdout(1000);
      if s.len() > 0 {
        (&stdout_consumer)(s);
        set stdout_consumed_anything = true;
      } else {
        set stdout_consuming = false;
      }
    }


    stderr_consumed_anything = false;
    stderr_consuming = true;
    while stderr_consuming {
      s = self.read_stderr(1000);
      if s.len() > 0 {
        (&stderr_consumer)(s);
        set stderr_consumed_anything = true;
      } else {
        set stderr_consuming = false;
      }
    }


    if not stdout_consumed_anything and not stderr_consumed_anything and not self.alive() {
      set running = false;
    }

  }

  x = join(self);
  return x;
}

func print_and_join(self Subprocess) int {
  x = consume_and_join(
    self,
    &(stdout_chunk) => {
      print(stdout_chunk);
    },
    &(stderr_chunk) => {
      print(stderr_chunk);
    });
  return x;
}

struct ExecResult {
  return_code int;
  stdout str;
  stderr str;
}

func expect_or<F>(result &ExecResult, func F)
str
where Prot["__call", Refs(&F, &ExecResult), void]
{
  if result.return_code != 0 {
    func(result);
  }
  return result.stdout;
}

func capture_and_join(self Subprocess) ExecResult {
  stdout_builder = StringBuilder();
  stderr_builder = StringBuilder();
  return_code =
      consume_and_join(
          self,
          &(stdout_chunk) => { stdout_builder.print(stdout_chunk); },
          &(stderr_chunk) => { stderr_builder.print(stderr_chunk); });
  return ExecResult(return_code, stdout_builder.str(), stderr_builder.str());
}

func join(self Subprocess) int {
  status = join(self.handle);
  destroy(self.handle);
  return status;
}

func alive(self &Subprocess) bool {
  return alive(self.handle);
}

func read_all_stdout(self &Subprocess) str {
  builder = StringBuilder();

  running = true;
  while running {
    s = self.read_stdout(1000);
    builder.print(s);
    if s.len() == 0 and not self.alive() {
      set running = false;
    }
  }

  return builder.str();
}

func read_stdout(self &Subprocess, len int) str {
  return read_stdout(self.handle, len);
}
func read_stderr(self &Subprocess, len int) str {
  return read_stderr(self.handle, len);
}

extern func get_env_var(name str) str;
extern func launch_command(args Array<imm, str>, maybe_cwd str) i64;
extern func write_stdin(cmd i64, s str);
extern func close_stdin(cmd i64);
extern func read_stdout(cmd i64, len int) str;
extern func read_stderr(cmd i64, len int) str;
extern func join(cmd i64) int;
extern func alive(cmd i64) bool;
extern func destroy(cmd i64);
