
sealed interface MyOption imm { }

struct MySome imm {
  value @MyList;
}
impl MyOption for MySome;

struct MyNone imm { }
impl MyOption for MyNone;


struct MyList imm {
  value @int;
  next @MyOption;
}

func sum(list @MyList) int {
  return list.value + sum(list.next);
}

abstract func sum(virtual opt @MyOption) int;
func sum(opt @MyNone) int { return 0; }
func sum(opt @MySome) int {
   return sum(opt.value);
}


exported func main() int {
  list = MyList(7, MySome(MyList(17, MySome(MyList(18, MyNone())))));
  return sum(list);
}
