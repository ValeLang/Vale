import v.builtins.arith.*;
import v.builtins.drop.*;
import v.builtins.panic.*;

func drop_into<V Variability, S Int, E, F>(arr [#S]<imm, V>E, consumer &F) void
where func(&F, E)void
{}

extern("vale_static_sized_array_drop_into")
func drop_into<V Variability, S Int, E, F>(arr [#S]<mut, V>E, consumer &F) void
where func(&F, E)void;

func drop<V Variability, S Int, E>(arr [#S]<mut, V>E) void
where func drop(E)void {
  drop_into(arr, {_;});
}
func drop<V Variability, S Int, E>(arr [#S]<imm, V>E) void {}

func drop_into<E, F>(arr []<mut>E, consumer &F) void
where func(&F, E)void
{
  while (arr.len() > 0) {
    consumer(arr.pop());
  }
  [] = arr;
}
func drop<E>(arr []<mut>E) void
where func drop(E)void {
  drop_into(arr, {_;});
}

func drop_into<E, F>(arr []<imm>E, consumer &F) void
where func(&F, &E)void, func drop(E)void
{
  i = arr.len() - 1;
  while (i >= 0) {
    consumer(arr[i]);
    set i = i - 1;
  }
}

func drop<E>(arr []<imm>E) void
where func drop(E)void {
  drop_into(arr, &{_;});
}

extern("vale_static_sized_array_len")
func len<M Mutability, V Variability, S Int, E>(arr &[#S]<M Mutability, V>E) int;

extern("vale_runtime_sized_array_len")
func len<M Mutability, E>(arr &[]<M>E) int;

extern("vale_static_sized_array_free")
func __free_replaced<V Variability, S Int, E>(arr [#S]<imm, V>E)
where D Prot = func drop(void, E)void;

extern("vale_runtime_sized_array_free")
func __free_replaced<E>(arr []<imm>E)
where D Prot = func drop(void, E)void;



func __free_replaced<V Variability, S Int, E>(arr [#S]<mut, V>E) {
  __vbi_panic();
}

func __free_replaced<E>(arr []<mut>E) {
  __vbi_panic();
}



extern("vale_runtime_sized_array_capacity")
func capacity<E>(arr &[]<mut>E) int;

extern("vale_runtime_sized_array_push")
func push<E>(arr &[]<mut>E, newElement E) void;

extern("vale_runtime_sized_array_pop")
func pop<E>(arr &[]<mut>E) E;

extern("vale_runtime_sized_array_mut_new")
func Array<M Mutability, E Ref>(size int) []<M>E
where M = mut;

func Array<M Mutability, E, G>(n int, generator G) []<M>E
where
  M Mutability = mut,
  func(&G, int)E,
  func drop(G)void
{
  arr = Array<mut, E>(n);
  i = 0;
  while (i < n) {
    arr.push(generator(i));
    set i = i + 1;
  }
  return arr;
}

extern("vale_runtime_sized_array_imm_new")
func Array<M Mutability, E Ref imm, G>(n int, generator &G) []<M>E
where
  M Mutability = imm,
  func(&G, int)E;
