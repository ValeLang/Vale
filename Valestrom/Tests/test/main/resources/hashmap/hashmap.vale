import array.make.*;
import math.*;
import list.*;
import ifunction.ifunction1.*;


struct IntHasher { }
fn __call(this &IntHasher, x int) int { ret x; }

struct IntEquator { }
fn __call(this &IntEquator, a int, b int) bool { ret a == b; }

struct HashMapNode<K, V> {
  key K;
  value! V;
}

struct HashMap<K, V, H, E> {
  hasher H;
  equator E;
  table! Array<mut, Opt<HashMapNode<K, V>>>;
  size! int;
}

fn HashMap<K, V, H, E>(hasher H, equator E) HashMap<K, V, H, E> {
  ret HashMap<K, V, H, E>(hasher, equator, 0);
}

fn HashMap<K, V, H, E>(hasher H, equator E, capacity int) HashMap<K, V, H, E> {
  ret HashMap<K, V>(
      hasher,
      equator,
      MakeVaryArray(
        capacity,
        &!IFunction1<mut, int, Opt<HashMapNode<K, V>>>((index) => {
          opt Opt<HashMapNode<K, V>> = None<HashMapNode<K, V>>();
          opt
        })),
      0);
}

fn len<K, V, H, E>(self &HashMap<K, V, H, E>) int { ret self.size; }

fn update<K, V, H, E>(self &!HashMap<K, V, H, E>, key K, value V) void {
  hash int = (&self.hasher)(key);
  startIndex = abs(hash mod self.table.len());
  maybeIndex = findIndexOfKey(&self.table, self.equator, startIndex, key);
  if (maybeIndex.isEmpty()) {
    panic("Map doesnt have given key!");
  }
  optNode &!Opt<HashMapNode<K, V>> = self.table[maybeIndex.get()];
  node *!HashMapNode<K, V> = get(&!optNode);
  set node.value = value;
}

fn add<K, V, H, E>(map &!HashMap<K, V, H, E>, key K, value V) void {
  if (map.has(key)) {
    panic("Map already has given key!");
  }
  if ((map.size + 1) * 2 >= map.table.len()) {
    newSize =
        if (map.table.len() == 0) { 2 }
        else { map.table.len() * 2 };
    newTable =
        MakeVaryArray(
            newSize,
            &!IFunction1<mut, int, Opt<HashMapNode<K, V>>>((index) => {
              opt Opt<HashMapNode<K, V>> = None<HashMapNode<K, V>>();
              opt
            }));
    i! = 0;
    while (i < map.table.len()) {
      if (map.table[i].isEmpty()) {
        // do nothing
      } else {
        maybeNode = (set map.table[i] = None<HashMapNode<K, V>>());
        node = get(maybeNode);
        addNodeToTable(&!newTable, map.hasher, node);
      }
      set i = i + 1;
    }
    set map.table = newTable;
  }

  addNodeToTable(map.table, &map.hasher, HashMapNode<K, V>(key, value));
  set map.size = map.size + 1;
}

fn addNodeToTable<K, V, H>(table &!Array<mut, Opt<HashMapNode<K, V>>>, hasher H, node HashMapNode<K, V>) {
  hash int = (&hasher)(node.key);
  startIndex = abs(hash mod table.len());
  index = findEmptyIndexForKey(&table, startIndex, node.key);

  opt Opt<HashMapNode<K, V>> = Some(node);
  set table[index] = opt;
}

fn findEmptyIndexForKey<K, V>(table &Array<mut, Opt<HashMapNode<K, V>>>, startIndex int, key K) int {
  i! = 0;
  while (i < table.len()) {
    index = (startIndex + i) mod table.len();
    something = table[index];
    if (something.isEmpty()) {
      ret index;
    }
    // continue to next node
    set i = i + 1;
  }
  ret panic("findEmptyIndexForKey went past end of table!");
}

fn findIndexOfKey<K, V, E>(table &Array<mut, Opt<HashMapNode<K, V>>>, equator E, startIndex int, key K) Opt<int> {
  i! = 0;
  while (i < table.len()) {
    index = (startIndex + i) mod table.len();
    something = table[index];
    if (something.isEmpty()) {
      ret None<int>();
    }
    node = something.get();
    if ((&equator)(node.key, key)) {
      ret Some<int>(index);
    }
    // continue to next node
    set i = i + 1;
  }
  ret panic("findIndexOfKey went past end of table! len " + str(table.len()) + " and i " + str(i));
}

fn get<K, V, H, E>(self &HashMap<K, V, H, E>, key K) Opt<*V> {
  if (self.table.len() == 0) {
    ret None<*V>();
  }
  hash int = (&self.hasher)(key);
  startIndex = abs(hash mod self.table.len());
  maybeIndex = findIndexOfKey(self.table, self.equator, startIndex, key);
  if (maybeIndex.isEmpty()) {
    opt Opt<*V> = None<*V>();
    ret opt;
  }
  node = self.table[maybeIndex.get()].get();
  opt Opt<*V> = Some<*V>(*node.value);
  ret opt;
}

fn has<K, V, H, E>(self &HashMap<K, V, H, E>, key K) bool {
  ret not(self.get(key).isEmpty());
}

fn keys<K, V, H, E>(self &HashMap<K, V, H, E>) Array<imm, K> {
  list = List<K>();
  index! = 0;
  while (index < self.table.len()) {
    maybeNode = self.table[index];
    if (not(maybeNode.isEmpty())) {
      list!.add(maybeNode.get().key);
    }
    set index = index + 1;
  }
  ret list.toImmArray();
}

fn values<K, V, H, E>(self &HashMap<K, V, H, E>) Array<mut, V> {
  list = List<V>();
  index! = 0;
  while (index < self.table.len()) {
    maybeNode = self.table[index];
    if (not(maybeNode.isEmpty())) {
      list!.add(maybeNode.get().value);
    }
    set index = index + 1;
  }
  ret list.toVaryArray();
}

fn innerRemove<K, V, H, E>(
  table &!Array<mut, Opt<HashMapNode<K, V>>>,
  hasher H,
  equator E,
  key K)
int {
  hash int = (&hasher)(key);
  startIndex = abs(hash mod table.len());
  maybeIndex = findIndexOfKey(&table, equator, startIndex, key);
  index = maybeIndex.get();
  set table[index] = None<HashMapNode<K, V>>();
  ret index;
}

fn remove<K, V, H, E>(
  map &!HashMap<K, V, H, E>,
  key K)
void {
  originalIndex = innerRemove(map.table, map.hasher, map.equator, key);
  set map.size = map.size - 1;

  i! = 1;
  while (i < map.table.len()) {
    neighborIndex = (originalIndex + i) mod len(&map.table);
    maybeNeighbor = (set map.table[neighborIndex] = None<HashMapNode<K, V>>());
    if (not maybeNeighbor.isEmpty()) {
      (neighborKey, neighborValue) = (maybeNeighbor).get();
      addNodeToTable(map.table, map.hasher, HashMapNode<K, V>(neighborKey, neighborValue));
    } else {
      drop(maybeNeighbor);
      set i = map.table.len(); // break
    }
    set i = i + 1;
  }
}
