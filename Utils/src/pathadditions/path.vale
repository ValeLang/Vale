
func RemoveDirAll(path &Path) Result<void, FileError> {
  is_symlink_result = path.IsSymLink();
  if (is_symlink_result.is_err()) {
    ret Err<void, FileError>((is_symlink_result).expect_err());
  }
  is_symlink = is_symlink_result.expect();
  if is_symlink {
    RemoveFile(path)
  } else {
    RemoveDirAllRecursive(path)
  }
}

func RemoveDirAllRecursive(path &Path) Result<void, FileError> {
  read_dir_result = ListDir(path);
  children =
    if (read_dir_result.is_ok()) {
      read_dir_result.expect()
    } else {
      ret Err<void, FileError>((read_dir_result).expect_err());
    };

  i = 0;
  while (i < children.len()) {
    child = children.get(i);
    is_directory_result = IsDirectory(child);
    if (is_directory_result.is_err()) {
      ret Err<void, FileError>((is_directory_result).expect_err());
    }
    is_dir = is_directory_result.expect();

    if (is_dir) {
      remove_dir_all_recursive_result = RemoveDirAllRecursive(child);
      if (remove_dir_all_recursive_result.is_err()) {
        ret Err<void, FileError>((remove_dir_all_recursive_result).expect_err());
      }
      remove_dir_all_recursive_result.expect();
      // continue
    } else {
      remove_file_result = RemoveFile(child);
      if (remove_file_result.is_err()) {
        ret Err<void, FileError>((remove_file_result).expect_err());
      }
      remove_file_result.expect();
      // continue
    }
    set i = i + 1;
  }

  ret RemoveDir(path);
}

func ListDir(path &Path) Result<List<Path>, FileError> {
  Ok<List<Path>, FileError>(iterdir(path))
}

func ExternErrorCodeToError(error_code int, path &Path) FileError {
  if (error_code == 0) {
    panic("ExternErrorCodeToError Extern error: bad argument")
  } else if (error_code == 1) {
    FileNotFoundError(path.clone())
  } else {
    panic("RemoveDir: unknown Extern error code {error_code}")
  }
}

func RemoveDir(path &Path) Result<void, FileError> {
  error_code = RemoveDirExtern(path.str());
  if (error_code == 0) {
    Ok<void, FileError>(void())
  } else {
    Err<void, FileError>(ExternErrorCodeToError(error_code, path))
  }
}

extern func RemoveDirExtern(path str) int;

func RemoveFile(path &Path) Result<void, FileError> {
  error_code = RemoveFileExtern(path.str());
  if (error_code == 0) {
    Ok<void, FileError>(void())
  } else {
    Err<void, FileError>(ExternErrorCodeToError(error_code, path))
  }
}

extern func RemoveFileExtern(path str) int;

func IsSymLink(path &Path) Result<bool, FileError> {
  Ok<bool, FileError>(IsSymLinkExtern(path.str()))
}

extern func IsSymLinkExtern(path str) bool;

func IsDirectory(path &Path) Result<bool, FileError> {
  Ok<bool, FileError>(is_dir(path))
}

func GetTempDir() Path {
  Path(GetTempDirExtern())
}

func Rename(path &Path, destination &Path) Result<void, FileError> {
  error_code = RenameExtern(path.str(), destination.str());
  if (error_code == 0) {
    Ok<void, FileError>(void())
  } else {
    Err<void, FileError>(ExternErrorCodeToError(error_code, path))
  }
}

extern func RenameExtern(path str, destination str) int;

extern func GetTempDirExtern() str;
