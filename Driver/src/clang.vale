import stdlib.os.*;

fn invoke_clang(
  windows bool,
  clang_inputs &List<Path>,
  exe_name str,
  census bool,
  debug_symbols bool,
  output_dir &Path)
Subprocess {
  program =
    if (windows) {
      "cl.exe"
    } else {
      = if (not FindProgramInPath("clang-11").isEmpty()) { "clang-11" } else { "clang" }
    };

  exe_file = output_dir / exe_name;

  args = List<str>();

  if (windows) {
    args!.add("/ENTRY:\"main\"");
    args!.add("/SUBSYSTEM:CONSOLE");
    args!.add("/Fe:{exe_file.str()}");
  } else {
    args!.add("-o");
    args!.add(exe_file.str());
  }

  args!.add("-I" + output_dir.str());
  args!.add("-Wall");
  args!.add("-Werror");
  args!.add("-O3");

  if (debug_symbols) {
    args!.add("-g");
  }

  if (census) {
    if (windows) {
      args!.add("/fsanitize=address");
      args!.add("clang_rt.asan_dynamic-x86_64.lib");
      args!.add("clang_rt.asan_dynamic_runtime_thunk-x86_64.lib");
    } else {
      args!.add("-fsanitize=address");
      args!.add("-fsanitize=leak");
      args!.add("-fno-omit-frame-pointer");
    }
  }

  clang_inputs.each((clang_input){
    args!.add(clang_input.str());
  });

  ret (Subprocess(program, &args)).expect();
}