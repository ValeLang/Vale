export []<imm>int as ImmIntArray;

func range(begin int, end int) IntRange { return IntRange(begin, end); }
struct IntRange { begin int; end int; }
func begin(self &IntRange) IntRangeIter { return IntRangeIter(&self, self.begin); }
struct IntRangeIter { range &IntRange; i! int; }
func next(self &IntRangeIter) Opt<int> {
  if self.i < self.range.end {
    Some(set self.i = self.i + 1)
  } else {
    None<int>()
  }
}

exported func expSumBytes(arr []<imm>int) int {
  sum = 0;
  l = len(arr);
  foreach i in 0..l { set sum = sum + arr[i]; }
  return sum;
}

extern func extSumBytes(arr []<imm>int) int;

exported func main() int {
  a = #[]int(5, {_});
  return extSumBytes(a);
}
