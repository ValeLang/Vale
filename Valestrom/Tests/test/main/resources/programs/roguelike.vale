import hashmap.*;
import array.each.*;
import string.*;
import ioutils.*;

// roguelike.vale - A simple Roguelike game, made in Vale.
//
// To build:
//     python3 valec.py build samples/programs/roguelike.vale vstl/hashmap.vale vstl/list.vale
//
// This program displays a map like:
//   ##########
//   #......g.#
//   #........#
//   #..g..g..#
//   #..@...g.#
//   #.g......#
//   #.g.g..g.#
//   #g...g...#
//   #........#
//   ##########
// where the player controls the @. When the player tries to move onto a space
// already occupied by a goblin ("g"), it will destroy the goblin.


struct Vec<N, T> where N int
{
  values [#N]<imm>T;
}

struct Goblin {
  location Vec<2, int>;
}

func makeBoard() Array<mut, []<mut>str> {
  ret
    MakeArray(10, (row) => {
      MakeArray(10, (col) => {
        if (row == 0) { "#" }
        else if (col == 0) { "#" }
        else if (row == 9) { "#" }
        else if (col == 9) { "#" }
        else { "." }
      })
    });
}

func display(
    board &Array<mut, []<mut>str>,
    goblins &HashMap<int, Goblin, IntHasher, IntEquator>,
    playerRow int,
    playerCol int)
{
  toPrint = "";
  board.eachI((rowI, row) => {
    row.eachI((cellI, cell) => {
      charToPrint = cell;

      if (rowI == playerRow and cellI == playerCol) {
        set charToPrint = "@";
      } else {
        goblins.keys().each((key) => {
          maybeGoblin = goblins.get(key);
          goblin = (maybeGoblin).get(); // TODO try getting rid of this ^, doesnt wanna find the get function

          if (rowI == goblin.location.values.1 and cellI == goblin.location.values.0) {
            set charToPrint = "g";
          }
        });
      }

      set toPrint = toPrint + charToPrint;
    });
    set toPrint = toPrint + "\n";
  });
  print(toPrint);
}

func inputKey() int {
  key = 0;
  while (true) {
    set key = __getch();
    if (key == 81) {
      ret key;
    } else if (key == 119) {
      ret key;
    } else if (key == 115) {
      ret key;
    } else if (key == 97) {
      ret key;
    } else if (key == 100) {
      ret key;
    } else if (key == 10) {
      // Enter key, do nothing
    }
    // Continue
  }
  __vbi_panic();
}


func goblinAt(
  goblins &HashMap<int, Goblin, IntHasher, IntEquator>,
  goblinKey int,
  row int,
  col int)
bool {
  a = goblins.get(goblinKey);
  b = (a).get();
  [goblinCol, goblinRow] = b.location.values;
  ret row == goblinRow and col == goblinCol;
}


exported func main() int {
  println("Welcome to the ridiculously simplistic roguelike game!");
  println("Controls:");
  println("  w+enter: move up");
  println("  a+enter: move left");
  println("  s+enter: move down");
  println("  d+enter: move right");
  println("  Q+enter: quit");
  println("When you attempt to move onto a space occupied by a goblin, it will");
  println("destroy that goblin. Destroy all goblins to win!");

  board = makeBoard();

  playerRow = 4;
  playerCol = 3;

  goblins = HashMap<int, Goblin, IntHasher, IntEquator>(IntHasher(), IntEquator());
  goblins!.add(13, Goblin(Vec(#[#][6, 3])));
  goblins!.add(14, Goblin(Vec(#[#][2, 6])));
  goblins!.add(15, Goblin(Vec(#[#][5, 7])));
  goblins!.add(17, Goblin(Vec(#[#][2, 5])));
  goblins!.add(19, Goblin(Vec(#[#][7, 1])));
  goblins!.add(23, Goblin(Vec(#[#][3, 3])));
  goblins!.add(24, Goblin(Vec(#[#][1, 7])));
  goblins!.add(25, Goblin(Vec(#[#][7, 6])));
  goblins!.add(27, Goblin(Vec(#[#][4, 6])));
  goblins!.add(29, Goblin(Vec(#[#][7, 4])));

  running = true;
  while (running) {
    display(
        &board,
        &goblins,
        playerRow,
        playerCol);

    key = inputKey();
    newPlayerRow = playerRow;
    newPlayerCol = playerCol;
    if (key == 81) {
      set running = false;
    } else if (key == 119) {
      set newPlayerRow = newPlayerRow - 1;
    } else if (key == 115) {
      set newPlayerRow = newPlayerRow + 1;
    } else if (key == 97) {
      set newPlayerCol = newPlayerCol - 1;
    } else if (key == 100) {
      set newPlayerCol = newPlayerCol + 1;
    }

    killedGoblin = false;
    goblins.keys().each((key) => {
      if (goblinAt(&goblins, key, newPlayerRow, newPlayerCol)) {
        goblins!.remove(key);
        set killedGoblin = true;
      }
    });
    if (not killedGoblin) {
      if (board[newPlayerRow][newPlayerCol] == ".") {
        set playerRow = newPlayerRow;
        set playerCol = newPlayerCol;
      }
    }

    if (len(goblins.keys()) == 0) {
      println("You win!");
      set running = false;
    }
  }
  ret 0;
}
