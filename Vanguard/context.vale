struct Context {
    code! StrSlice;
}
fn index(c &Context) int {
    = c.code.begin;
}
fn advance(c &Context) void {
    mut c.code = c.code.slice(1);
}
fn advance(c &Context, count int) void {
    mut c.code = c.code.slice(count, c.code.len());
}
fn peek(c &Context) StrSlice {
    = c.code.slice(0, 1);
}
fn peekNext(c &Context) StrSlice {
    = c.code.slice(1, 2);
}
fn peekNth(c &Context, n int) StrSlice {
    = c.code.slice(n, n + 1);
}

fn readWord(c &Context) StrSlice {
    = readValidChars(c, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_");
}
fn readOperator(c &Context) Opt<StrSlice> {
    opt Opt<StrSlice> = None<StrSlice>();
    if (c.peek() == ".") {
        dot = c.peek();
        c.advance();
        mut opt = Some(dot);
    }
    else if (not "=<>+-/*".find(c.peekNext()).isEmpty() and c.peekNth(2) == " ") {
        operatorChar = c.peekNext();
        c.advance(3);
        mut opt = Some(operatorChar);
    }else{
   
        maybeTwoLetterOperator = c.code.slice(0, 3);
        if (maybeTwoLetterOperator == "== " 
         or maybeTwoLetterOperator == "!= " 
         or maybeTwoLetterOperator == "or "
         or maybeTwoLetterOperator == "<= "
         or maybeTwoLetterOperator == ">= ") {
            c.advance(2);
            mut opt = Some(maybeTwoLetterOperator.slice(0, 2));
        }else{
            maybeThreeLetterOperator = c.code.slice(0, 4);
            if (maybeThreeLetterOperator == "and "
             or maybeThreeLetterOperator == "not "
             or maybeThreeLetterOperator == "<=> ") {
                c.advance(3);
                mut opt = Some(maybeThreeLetterOperator.slice(0, 3));
            }else{
                //mut opt = None<StrSlice>();
            }
        }
    }
    = opt;
}

fn readNumber(c &Context) StrSlice {
    startIndex = c.index();
    foundNumber = false;
    if (c.peek() == "-") {
        c.advance();
    }
    while (not "0123456789".find(c.peek()).isEmpty()) {
        mut foundNumber = true;
        c.advance();
    }
    
    = if (foundNumber) {
        = c.code.string.slice(startIndex, c.index());
      }else{
        = "".slice();
      }
}

//TODO: String litteral should escape characters
fn readStringLitteral(c &Context) StrSlice {
    = if (c.peek() != "\"") {
        = "".slice();
    }else{
        startIndex = c.index();
        c.advance();
        while (c.peek() != "\"") {
            print("!");
            c.advance();
        }
        c.advance();
        = c.code.string.slice(startIndex, c.index());
    }
}
fn readWhitespace(c &Context) void {
    readValidChars(c, " \r\n");
}
fn readValidChars(c &Context, validChars str) StrSlice {
    startIndex = c.index();
    while (not validChars.find(c.peek()).isEmpty()) {
        c.advance();
    }
    = c.code.string.slice(startIndex, c.index());
}
fn readAllWhitespaceButTheLast(c &Context) void {
    if (not " \r\n".find(c.peek()).isEmpty()) {
        while (not " \r\n".find(c.peekNext()).isEmpty()) {
            c.advance();
        }
    }
}