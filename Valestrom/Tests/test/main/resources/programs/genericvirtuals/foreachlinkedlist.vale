
import v.builtins.tup.*;
import v.builtins.opt.*;
import printutils.*;

sealed interface MyOption<T> where T Ref { }

struct MySome<T> where T Ref {
  value T;
}
impl<T> MyOption<T> for MySome<T>;

struct MyNone<T> where T Ref { }
impl<T> MyOption<T> for MyNone<T>;


struct MyList<T> where T Ref {
  value T;
  next ^MyOption<^MyList<T>>;
}

abstract func forEach<F, T>(virtual opt &MyOption<MyList<T>>, func F) int;
func forEach<F, T>(opt &MyNone<MyList<T>> impl MyOption<MyList<T>>, func F) int { ret 0; }
func forEach<F, T>(opt &MySome<MyList<T>> impl MyOption<MyList<T>>, func F) int {
   forEach<F, T>(opt.value, func);
   ret 0;
}
func forEach<F, T>(list &MyList<T>, func F) int {
  func(list.value);
  forEach<F, T>(list.next, func);
  ret 0;
}

exported func main() int {
  list = MyList<int>(10, MySome<^MyList<int>>(MyList<int>(20, MySome<^MyList<int>>(MyList<int>(30, MyNone<^MyList<int>>())))));
  forEach(&list, &print);
  ret 0;
}
