
fn getch() int { __getch() }
fn __getch() int extern;

fn +(a str, b str) str { __vaddStr(a, 0, len(a), b, 0, len(b)) }
fn __vaddStr(a str, aBegin int, aEnd int, b str, bBegin int, bEnd int) str extern;

fn print(s str) void { __vprintStr(s, 0, len(s)) }
fn __vprintStr(s str, start int, length int) extern;

fn float(x int) float { __castIntFloat(x) }
fn __castIntFloat(x int) float extern;

fn int(x float) int { __castFloatInt(x) }
fn __castFloatInt(x float) int extern;

fn str(x int) str { __castIntStr(x) }
fn __castIntStr(x int) str extern;

fn str(x float) str { __castFloatStr(x) }
fn __castFloatStr(x float) str extern;

fn len(s str) int { __strLength(s) }
fn __strLength(s str) int extern;

fn not(b bool) bool { __not(b) }
fn __not(b bool) bool extern;

fn -(x int) int { __negateInt(x) }
fn __negateInt(x int) int extern;

fn -(x float) float { __negateFloat(x) }
fn __negateFloat(x float) float extern;

fn +(left int, right int) int { __addIntInt(left, right) }
fn __addIntInt(left int, right int) int extern;

fn +(left float, right float) float { __addFloatFloat(left, right) }
fn __addFloatFloat(left float, right float) float extern;

fn *(left int, right int) int { __multiplyIntInt(left, right) }
fn __multiplyIntInt(left int, right int) int extern;

fn *(left float, right float) float { __multiplyFloatFloat(left, right) }
fn __multiplyFloatFloat(left float, right float) float extern;

fn -(left int, right int) int { __subtractIntInt(left, right) }
fn __subtractIntInt(left int, right int) int extern;

fn -(left float, right float) float { __subtractFloatFloat(left, right) }
fn __subtractFloatFloat(left float, right float) float extern;

fn /(left int, right int) int { __divideIntInt(left, right) }
fn __divideIntInt(left int, right int) int extern;

fn <(left float, right float) bool { __lessThanFloat(left, right) }
fn __lessThanFloat(left float, right float) bool extern;

fn >(left float, right float) bool { __greaterThanFloat(left, right) }
fn __greaterThanFloat(left float, right float) bool extern;

fn <(left int, right int) bool { __lessThanInt(left, right) }
fn __lessThanInt(left int, right int) bool extern;

fn >(left int, right int) bool { __greaterThanInt(left, right) }
fn __greaterThanInt(left int, right int) bool extern;

fn <=(left int, right int) bool { __lessThanOrEqInt(left, right) }
fn __lessThanOrEqInt(left int, right int) bool extern;

fn >=(left int, right int) bool { __greaterThanOrEqInt(left, right) }
fn __greaterThanOrEqInt(left int, right int) bool extern;

fn ==(left bool, right bool) bool { __eqBoolBool(left, right) }
fn __eqBoolBool(left bool, right bool) bool extern;

fn ==(left int, right int) bool { __eqIntInt(left, right) }
fn __eqIntInt(left int, right int) bool extern;

fn and(left bool, right bool) bool { __and(left, right) }
fn __and(left bool, right bool) bool extern;

fn or(left bool, right bool) bool { __or(left, right) }
fn __or(left bool, right bool) bool extern;

fn mod(left int, right int) int { __mod(left, right) }
fn __mod(left int, right int) int extern;

fn ===<T>(left &T, right &T) bool extern(vale_is);
