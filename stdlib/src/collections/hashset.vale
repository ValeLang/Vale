struct HashSet<K, H, E> {
  hasher H;
  equator E;
  table! Array<mut, Opt<K>>;
  size! int;
}

func HashSet<K, H, E>(hasher H, equator E) HashSet<K, H, E> {
  HashSet<K, H, E>(hasher, equator, 0)
}

func HashSet<K, H, E>(hasher H, equator E, capacity int) HashSet<K, H, E> {
  HashSet<K>(
      hasher,
      equator,
      Array<mut, Opt<K>>(
        capacity,
        &!IFunction1<mut, int, Opt<K>>((index) => {
          opt Opt<K> = None<K>();
          opt
        })),
      0)
}

func HashSet<K, H, E, M, N>(
    valuesKSA &[#N]<M>K,
    hasher H,
    equator E)
HashSet<K, H, E> {
  this = HashSet<K, H, E>(hasher, equator, 0);
  foreach v in valuesKSA {
    if (not this.has(v)) {
      this!.add(v);
    }
  }
  ret this;
}

func HashSet<K, H, E>(
    valuesArray &[]<_>K,
    hasher H,
    equator E)
HashSet<K, H, E> {
  this = HashSet<K, H, E>(hasher, equator, 0);
  foreach v in valuesArray {
    if (not this.has(v)) {
      this!.add(v);
    }
  }
  ret this;
}

func len<K, H, E>(self &HashSet<K, H, E>) int { self.size }

func isEmpty<K, H, E>(self &HashSet<K, H, E>) bool { self.size == 0 }

func add<K, H, E>(self &!HashSet<K, H, E>, key K) void {
  if (self.has(key)) {
    panic("HashSet already has given key!");
  }
  if ((self.size + 1) * 2 >= self.table.len()) {
    newSize =
        if (self.table.len() == 0) { 2 }
        else { self.table.len() * 2 };
    newTable =
        Array<mut, Opt<K>>(
            newSize,
            &!IFunction1<mut, int, Opt<K>>((index) => {
              opt Opt<K> = None<K>();
              opt
            }));
    i! = 0;
    while (i < self.table.len()) {
      if (self.table[i].isEmpty()) {
        // do nothing
      } else {
        node? = (mut self.table[i] = None<K>());
        node = get(node?);
        addNodeToHashSetTable(&!newTable, self.hasher, node);
      }
      set i = i + 1;
    }
    set self.table = newTable;
  }

  addNodeToHashSetTable(&!self.table, self.hasher, key);
  set self.size = self.size + 1;
}

func addNodeToHashSetTable<K, H>(table &!Array<mut, Opt<K>>, hasher H, key K) {
  hash int = (&hasher)(key);
  startIndex = abs(hash mod table.len());
  index = findEmptyIndexInHashSetForKey(&table, startIndex, key);

  opt Opt<K> = Some(key);
  set table[index] = opt;
}

func findEmptyIndexInHashSetForKey<K>(table &Array<mut, Opt<K>>, startIndex int, key K) int {
  i! = 0;
  while (i < table.len()) {
    index = (startIndex + i) mod table.len();
    something = table[index];
    if (something.isEmpty()) {
      ret index;
    }
    // continue to next node
    set i = i + 1;
  }
  panic("findEmptyIndexInHashSetForKey went past end of table!");
}

func findIndexOfKey<K, E>(table &Array<mut, Opt<K>>, equator E, startIndex int, key K) Opt<int> {
  i! = 0;
  while (i < table.len()) {
    index = (startIndex + i) mod table.len();
    something = table[index];
    if (something.isEmpty()) {
      ret None<int>();
    }
    node = something.get();
    if ((equator)(node, key)) {
      ret Some<int>(index);
    }
    // continue to next node
    set i = i + 1;
  }
  panic("findIndexOfKey went past end of table! len " + str(table.len()) + " and i " + str(i));
}

func get<K, H, E>(self &HashSet<K, H, E>, key K) Opt<K> {
  if (self.table.len() == 0) {
    ret None<K>();
  }
  hash int = (self.hasher)(key);
  startIndex = abs(hash mod self.table.len());
  index? = findIndexOfKey(&self.table, self.equator, startIndex, key);
  if (index?.isEmpty()) {
    opt Opt<K> = None<K>();
    ret opt;
  }
  node = self.table[index?.get()].get();
  opt Opt<K> = Some<K>(node);
  ret opt;
}

func has<K, H, E>(self &HashSet<K, H, E>, key K) bool {
  not(self.get(key).isEmpty())
}

func toArray<K, H, E>(self &HashSet<K, H, E>) Array<imm, K> {
  list = List<K>();
  index! = 0;
  while (index < self.table.len()) {
    node? = self.table[index];
    if (not(node?.isEmpty())) {
      list!.add(node?.get());
    }
    set index = index + 1;
  }
  list.toImmArray()
}

func innerRemove<K, H, E>(
  table &!Array<mut, Opt<K>>,
  hasher H,
  equator E,
  key K)
int {
  hash int = (&hasher)(key);
  startIndex = abs(hash mod table.len());
  index? = findIndexOfKey(&table, &equator, startIndex, key);
  index = index?.get();
  set table[index] = None<K>();
  ret index;
}

func remove<K, H, E>(
  self &!HashSet<K, H, E>,
  key K)
void {
  originalIndex = innerRemove(&!self.table, self.hasher, self.equator, key);
  set self.size = self.size - 1;

  i! = 1;
  while (i < self.table.len()) {
    neighborIndex = (originalIndex + i) mod len(&self.table);
    neighbor? = (mut self.table[neighborIndex] = None<K>());
    if (not neighbor?.isEmpty()) {
      neighborKey = (neighbor?).get();
      addNodeToHashSetTable(&!self.table, self.hasher, neighborKey);
    } else {
      drop(neighbor?);
      set i = self.table.len(); // break
    }
    set i = i + 1;
  }
}

func each<K, H, E, F>(
  self &HashSet<K, H, E>,
  func F)
void {
  index! = 0;
  while (index < self.table.len()) {
    node? = self.table[index];
    if (not(node?.isEmpty())) {
      func!(node?.get());
    }
    set index = index + 1;
  }
}

func each<K, H, E, F>(
  self &!HashSet<K, H, E>,
  func F)
void {
  index! = 0;
  while (index < self.table.len()) {
    node? = self.table[index];
    if (not(node?.isEmpty())) {
      func!(node?.get());
    }
    set index = index + 1;
  }
}



struct HashSetReadonlyIter<K> {
  table &Array<mut, Opt<K>>;
  pos! int;
}

func begin<K, H, E>(map &HashSet<K, H, E>) HashSetReadonlyIter<K> {
  HashSetReadonlyIter<K>(&map.table, 0)
}

func next<K>(iter &!HashSetReadonlyIter<K>) Opt<&K> {
  while iter.pos < iter.table.len() {
    this_pos = set iter.pos = iter.pos + 1;
    if not iter.table[this_pos].isEmpty() {
      node = &iter.table[this_pos].get();
      ret Some<&K>(node);
    }
  }
  ret None<&K>();
}


struct HashSetReadwriteIter<K> {
  table &![]<mut>Opt<K>;
  pos! int;
}

func begin<K, H, E>(map &!HashSet<K, H, E>) HashSetReadwriteIter<K> {
  HashSetReadwriteIter<K>(&!map.table, 0)
}

func next<K>(iter &!HashSetReadwriteIter<K>) Opt<&!K> {
  while iter.pos < iter.table.len() {
    this_pos = set iter.pos = iter.pos + 1;
    if not iter.table[this_pos].isEmpty() {
      node = &!iter.table[this_pos]!.get();
      ret Some<&!K>(node);
    }
  }
  ret None<&!K>();
}
