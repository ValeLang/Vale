import v.builtins.panic.*;

sealed interface Result<OkType, ErrType> where OkType Ref, ErrType Ref { }
struct Ok<OkType, ErrType> where OkType Ref, ErrType Ref { value OkType; }
impl<OkType, ErrType> Result<OkType, ErrType> for Ok<OkType, ErrType>;
struct Err<OkType, ErrType> where OkType Ref, ErrType Ref { value ErrType; }
impl<OkType, ErrType> Result<OkType, ErrType> for Err<OkType, ErrType>;

abstract func is_ok<OkType, ErrType>(virtual result &Result<OkType, ErrType>) bool;
func is_ok<OkType, ErrType>(ok &Ok<OkType, ErrType> impl Result<OkType, ErrType>) bool { ret true; }
func is_ok<OkType, ErrType>(err &Err<OkType, ErrType> impl Result<OkType, ErrType>) bool { ret false; }
func is_err<OkType, ErrType>(result &Result<OkType, ErrType>) bool { ret not is_ok(result); }

abstract func is_ok<OkType, ErrType>(virtual result *!Result<OkType, ErrType>) bool;
func is_ok<OkType, ErrType>(ok *!Ok<OkType, ErrType> impl Result<OkType, ErrType>) bool { ret true; }
func is_ok<OkType, ErrType>(err *!Err<OkType, ErrType> impl Result<OkType, ErrType>) bool { ret false; }
func is_err<OkType, ErrType>(result *!Result<OkType, ErrType>) bool { ret not is_ok(result); }



abstract func expect<OkType, ErrType>(virtual result Result<OkType, ErrType>) OkType;
func expect<OkType, ErrType>(err Err<OkType, ErrType> impl Result<OkType, ErrType>) OkType { panic("Called expect() on a Err!"); }
func expect<OkType, ErrType>(ok Ok<OkType, ErrType> impl Result<OkType, ErrType>) OkType {
  Ok<OkType, ErrType>[value] = ok;
  ret value;
}

abstract func expect<OkType, ErrType>(virtual result &Result<OkType, ErrType>) *OkType;
func expect<OkType, ErrType>(err &Err<OkType, ErrType> impl Result<OkType, ErrType>) *OkType { panic("Called expect() on a Err!"); }
func expect<OkType, ErrType>(ok &Ok<OkType, ErrType> impl Result<OkType, ErrType>) *OkType { ret *ok.value; }
// Itd be nice to abstract over permission
abstract func expect<OkType, ErrType>(virtual result *!Result<OkType, ErrType>) *!OkType;
func expect<OkType, ErrType>(err *!Err<OkType, ErrType> impl Result<OkType, ErrType>) *!OkType { panic("Called expect() on a Err!"); }
func expect<OkType, ErrType>(ok *!Ok<OkType, ErrType> impl Result<OkType, ErrType>) *!OkType { ret *!ok.value; }



abstract func expect_err<OkType, ErrType>(virtual result Result<OkType, ErrType>) ErrType;
func expect_err<OkType, ErrType>(ok Ok<OkType, ErrType> impl Result<OkType, ErrType>) ErrType { panic("Called expect_err() on an Ok!"); }
func expect_err<OkType, ErrType>(err Err<OkType, ErrType> impl Result<OkType, ErrType>) ErrType {
  Err<OkType, ErrType>[value] = err;
  ret value;
}

abstract func expect_err<OkType, ErrType>(virtual result &Result<OkType, ErrType>) *ErrType;
func expect_err<OkType, ErrType>(ok &Ok<OkType, ErrType> impl Result<OkType, ErrType>) *ErrType { panic("Called expect_err() on an Ok!"); }
func expect_err<OkType, ErrType>(err &Err<OkType, ErrType> impl Result<OkType, ErrType>) *ErrType { ret err.value; }
// Itd be nice to abstract over permission
abstract func expect_err<OkType, ErrType>(virtual result *!Result<OkType, ErrType>) *!ErrType;
func expect_err<OkType, ErrType>(ok *!Ok<OkType, ErrType> impl Result<OkType, ErrType>) infer-ret { panic("Called expect_err() on an Ok!"); }
func expect_err<OkType, ErrType>(err *!Err<OkType, ErrType> impl Result<OkType, ErrType>) *!ErrType { ret err.value; }
