
#!DeriveInterfaceDrop
sealed interface XOpt<T Ref> { }

#!DeriveStructDrop
struct XSome<T Ref> { value T; }


impl<T> XOpt<T> for XSome<T>;

abstract func drop<T>(virtual opt XOpt<T>) void
where func drop(T)void;

func drop<T>(self XSome<T>) void
where func drop(T)void {
  [unused] = self;
}

abstract func getOr<T>(virtual opt &XOpt<T>, default &T) &T;
func getOr<T>(opt &XSome<T>, default &T) &T {
  return opt.value;
}

exported func main() int {
  a XOpt<int> = XSome(9);
  return a.getOr<int>(12);
}
