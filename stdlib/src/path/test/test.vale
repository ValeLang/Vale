import stdlib.stringutils.*;
import stdlib.testsuite.*;
import stdlib.date.*;
import stdlib.path.*;

exported func main() {
  suite = TestSuite();

  test_directory = Path("./test_tmp/" + UnixTimestamp().str() + "/bork");
  println("zork 1");
  test_directory.CreateDirAll(true);
  println("zork 2");
  test_file = test_directory./("myfile.txt");
  println("zork 3");
  test_file.writeString("hello");
  println("zork 4");
  (&test_directory./("a.txt")).writeString("a");
  (&test_directory./("b.txt")).writeString("b");
  println("zork 5");

  suite.sub("CreateDirAll", (sts) => {
    sts.test("basic", {
      test_directory.exists() should_equal true;
    });
  });

  suite.sub("resolve", (sts) => {
    sts.test("basic", {
      println("in resolve test");
      test_directory.resolve().str() should_not_equal test_directory.str();
    });
  });

  suite.sub("exists", (sts) => {
    sts.test("0", { test_directory.exists() should_equal true });
    sts.test("1", { test_file.exists() should_equal true });
    sts.test("nonexistant", { test_directory./("idontexist").exists() should_equal false });
  });

  suite.sub("is_dir", (sts) => {
    sts.test("0", { test_directory.is_dir() should_equal true });
    sts.test("1", { test_file.is_dir() should_equal false });
  });
  suite.sub("is_file", (sts) => {
    sts.test("0", { test_directory.is_file() should_equal false });
    sts.test("1", { test_file.is_file() should_equal true });
  });

  suite.sub("directory", (sts) => {
    sts.test("0", { test_directory.directory().str() should_equal test_directory.str() });
    sts.test("1", { test_file.directory().str() should_equal test_directory.str() });
  });
  
  suite.sub("Read as string", (sts) => {
    sts.test("0", { test_file.readAsString() should_equal "hello" });
  });
  
  suite.sub("name", (sts) => {
    sts.test("0", { test_directory.name() should_equal "bork" });
    sts.test("1", { test_file.name() should_equal "myfile.txt" });
  });
  
  suite.sub("iterdir 1", (sts) => {
    sts.test("A", {
      files = test_directory.iterdir();
      files.len() should_equal 3;
    });
  });

  suite.sub("remove directory", (sts){
    sts.test("create and remove empty dir", {
      doomed_directory = test_directory./("/zork");
      doomed_directory.CreateDirAll(true).expect();
      doomed_directory.RemoveDir().expect();

      doomed_directory.exists() should_equal false;
    });

    sts.test("create and remove full dir", {
      doomed_directory = test_directory./("/zork");
      doomed_directory.CreateDir(true).expect();
      inner_directory = doomed_directory./("inner");
      inner_directory.CreateDir(true).expect();
      mork = inner_directory./("mork.txt");
      mork.writeString("mork");

      doomed_directory.RemoveDirAll().expect();

      mork.exists() should_equal false;
      inner_directory.exists() should_equal false;
      doomed_directory.exists() should_equal false;
    });

    sts.test("move empty dir", {
      original_directory = test_directory./("/zork");
      original_directory.CreateDirAll(true).expect();

      new_directory = test_directory./("/blork");
      Rename(&original_directory, &new_directory);

      original_directory.exists() should_equal false;
      new_directory.exists() should_equal true;
    });

    sts.test("move full dir", {
      original_directory = test_directory./("/zork");
      original_directory.CreateDir(true).expect();
      original_directory./("inner").CreateDir(true).expect();
      original_directory./("inner")./("mork.txt").writeString("mork");

      new_directory = test_directory./("/blork");
      Rename(&original_directory, &new_directory);

      original_directory.exists() should_equal false;
      original_directory./("inner").exists() should_equal false;
      original_directory./("inner")./("mork.txt").exists() should_equal false;
      new_directory.exists() should_equal true;
      new_directory./("inner").exists() should_equal true;
      new_directory./("inner")./("mork.txt").exists() should_equal true;
    });
  });

  (suite).finish();
  (suite).finish();
}
