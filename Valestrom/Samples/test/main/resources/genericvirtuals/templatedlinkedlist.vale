
interface MyOption<T> imm rules(T Ref) { }

struct MySome<T> imm rules(T Ref) {
  value T;
}
impl<T> MySome<T> for MyOption<T>;

struct MyNone<T> imm rules(T Ref) { }
impl<T> MyNone<T> for MyOption<T>;


struct MyList<T> imm rules(T Ref) {
  value T;
  next *MyOption<*MyList<T>>;
}

fn printValues(list *MyList<int>) void {
	 print(list.value);
	 printNextValue(list.next);
}

fn printNextValue(virtual opt *MyOption<*MyList<int>>) void { }
fn printNextValue(opt *MyNone<*MyList<int>> impl MyOption<*MyList<int>>) void { }
fn printNextValue(opt *MySome<*MyList<int>> impl MyOption<*MyList<int>>) void {
	 printValues(opt.value);
}


fn main() int {
 	list = MyList<int>(10, MySome<*MyList<int>>(MyList<int>(20, MySome<*MyList<int>>(MyList<int>(30, MyNone<*MyList<int>>())))));
 	printValues(list);
 	= 0;
}
