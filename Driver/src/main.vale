import stdlib.command.*;
import stdlib.flagger.*;
import stdlib.path.*;
import valecutils.pathadditions.*;
import valecutils.mtpid.*;


fn main() export {
  all_args_list = List<str>();
  i! = 0;
  while (i < numMainArgs()) {
    all_args_list!.add(getMainArg(i));
    mut i = i + 1;
  }
  all_args = all_args_list.toImmArray();


  driver_path = Path(all_args_list.get(0)).resolve();
  compiler_dir = driver_path.directory();

  if (all_args_list.len() < 2) {
    panic("Must specify a command (build or help).");
  }

  if (all_args_list.get(1) == "version" or
      all_args_list.get(1) == "--version") {
    // with open(str(self.valestrom_path / "midas-version.txt"), 'r') as f:
    //     print(f.read())
  } else if (all_args_list.get(1) == "help" or
      all_args_list.get(1) == "--help") {
    // if len(args) < 2:
    //     with open(str(self.valestrom_path / "valec-version.txt"), 'r') as f:
    //         print(f.read())
    //     with open(str(self.valestrom_path / "valec-help.txt"), 'r') as f:
    //         print(f.read())
    // elif args[1] == "build":
    //     with open(str(self.valestrom_path / "valec-help-build.txt"), 'r') as f:
    //         print(f.read())
    // elif args[1] == "run":
    //     with open(str(self.valestrom_path / "valec-help-run.txt"), 'r') as f:
    //         print(f.read())
    // elif args[1] == "paths":
    //     print("Valestrom path: " + str(self.valestrom_path))
    //     print("Builtins path: " + str(self.builtins_path))
    //     print("midas path: " + str(self.midas_path))
    // else:
    //     print("Unknown subcommand: " + args[1])
    // sys.exit(0)
  } else if (all_args_list.get(1) == "build") {
    build_stuff(&compiler_dir, &all_args);
  } else {
    println("Unknown subcommand, specify `build`, `run`, etc. Use `help` for more.")
  }
}
