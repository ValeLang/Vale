import stdlib.command.*;
import stdlib.flagger.*;
import stdlib.path.*;
import stdlib.mtpid.*;


exported func main() {
  all_args_list = List<str>();
  i = 0;
  while (i < numMainArgs()) {
    all_args_list.add(getMainArg(i));
    set i = i + 1;
  }
  all_args = all_args_list.toImmArray();


  passmanager_path = Path(all_args_list.get(0))&.resolve();
  if (not passmanager_path.exists()) {
    panic("Path {passmanager_path.str()} does not exist!");
  }
  compiler_dir = passmanager_path.directory();

  if (all_args_list.len() < 2) {
    panic("Must specify a command (build or help).");
  }

  if (all_args_list.get(1) == "version" or
      all_args_list.get(1) == "--version") {
    println(readFileAsString(str(compiler_dir / "valec-version.txt")));
  } else if (all_args_list.get(1) == "help" or
      all_args_list.get(1) == "--help") {
    if all_args_list.len() < 2 {
      println(readFileAsString(str(compiler_dir / "valec-help.txt")));
    } else if all_args_list.get(1) == "build" {
      println(readFileAsString(str(compiler_dir / "valec-help-build.txt")));
    } else {
      println("Unknown subcommand: " + all_args_list.get(1));
      println("");
      println(readFileAsString(str(compiler_dir / "valec-help.txt")));
    }
  } else if (all_args_list.get(1) == "build") {
    build_stuff(&compiler_dir, &all_args);
  } else {
    println("Unknown command: {all_args_list.get(1)}.");
    println("");
    println(readFileAsString(str(compiler_dir / "valec-help.txt")));
  }
}
