import v.builtins.result.*;

extern("vale_as_subtype")
func as<SubType Ref, SuperType Ref>(left &SuperType) Result<&SubType, &SuperType>
where implements(SubType, SuperType);

extern("vale_as_subtype")
func as<SubType Ref, SuperType Ref>(left SuperType) Result<SubType, SuperType>
where implements(SubType, SuperType), SuperType = Ref[own, _];

// extern("vale_as_subtype")
// func as_own<SubKind Kind, SuperType Ref, O Ownership>(left SuperType) Result<SubType, SuperType>
// where SuperKind Kind,
//   O = own,
//   SubType Ref = Ref[O, SubKind],
//   SuperType Ref = Ref[O, SuperKind],
//   implements(SubType, SuperType);
//