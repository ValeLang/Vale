import v.builtins.arith.*;

func drop_into<V, S, E, F>(arr [#S]<imm, V>E, consumer &F) void
where Prot["__call", Refs(&F, E), void]
{}

extern("vale_static_sized_array_drop_into")
func drop_into<V, S, E, F>(arr [#S]<mut, V>E, consumer &F) void
where Prot["__call", Refs(&F, E), void];

func drop<V, S, E>(arr [#S]<mut, V>E) void {
  drop_into(arr, {_;});
}
func drop<V, S, E>(arr [#S]<imm, V>E) void {}

func drop_into<E, F>(arr []<mut>E, consumer &F) void
where Prot["__call", Refs(&F, E), void]
{
  while (arr.len() > 0) {
    consumer(arr.pop());
  }
  [] = arr;
}
func drop<E>(arr []<mut>E) void
where Prot["drop", Refs(E), void] {
  drop_into(arr, {_;});
}

func drop_into<E, F>(arr []<imm>E, consumer &F) void
where Prot["__call", Refs(&F, E), void]
{
  i = arr.len() - 1;
  while (i >= 0) {
    consumer(arr[i]);
    set i = i - 1;
  }
}
func drop<E>(arr []<imm>E) void {
  drop_into(arr, &{_;});
}

extern("vale_static_sized_array_len")
func len<M, V, S, E>(arr &[#S]<M, V>E) int;

extern("vale_runtime_sized_array_len")
func len<M, E>(arr &[]<M>E) int;

extern("vale_static_sized_array_free")
func __free_replaced<V, S, E>(arr @[#S]<imm, V>E);

extern("vale_runtime_sized_array_free")
func __free_replaced<E>(arr @[]<imm>E);

extern("vale_runtime_sized_array_capacity")
func capacity<E>(arr &[]<mut>E) int;

extern("vale_runtime_sized_array_push")
func push<E>(arr &[]<mut>E, newElement E) void;

extern("vale_runtime_sized_array_pop")
func pop<E>(arr &[]<mut>E) E;

extern("vale_runtime_sized_array_mut_new")
func Array<M, E>(size int) []<M>E
where M Mutability = mut, E Ref;

func Array<M, E, G>(n int, generator G) []<M>E
where
  M Mutability = mut,
  G Ref = Ref[any(share, borrow), _],
  F Prot = Prot["__call", Refs(G, int), E]
{
  arr = Array<mut, E>(n);
  i = 0;
  while (i < n) {
    arr.push(generator(i));
    set i = i + 1;
  }
  ret arr;
}

extern("vale_runtime_sized_array_imm_new")
func Array<M, E, G>(n int, generator G) []<M>E
where
  M Mutability = imm,
  E Ref,
  G Ref = Ref[any(share, borrow), _],
  F Prot = Prot["__call", Refs(G, int), E];
