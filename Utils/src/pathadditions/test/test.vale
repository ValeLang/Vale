import stdlib.stringutils.*;
import stdlib.testsuite.*;
import stdlib.date.*;
import stdlib.path.*;
import valecutils.pathadditions.*;

// test_directory = Path("./test_tmp/" + UnixTimestamp().str() + "/bork");
// test_directory.CreateDirAll();
// test_file = test_directory./("myfile.txt");
// test_file.writeString("hello");
// test_directory./("a.txt").writeString("a");
// test_directory./("b.txt").writeString("b");

fn main() export {
  suite = TestSuite();

  test_directory = Path("./test_tmp/" + UnixTimestamp().str() + "/bork");

  suite!.sub("remove directory", (sts){
    sts!.test("create and remove empty dir", {
      doomed_directory = test_directory./("/zork");
      doomed_directory.CreateDirAll(true).expect();
      doomed_directory.RemoveDir().expect();

      doomed_directory.exists() should_equal false;
    });

    sts!.test("create and remove full dir", {
      doomed_directory = test_directory./("/zork");
      doomed_directory.CreateDir(true).expect();
      inner_directory = doomed_directory./("inner");
      inner_directory.CreateDir(true).expect();
      mork = inner_directory./("mork.txt");
      mork.writeString("mork");

      doomed_directory.RemoveDirAll().expect();

      mork.exists() should_equal false;
      inner_directory.exists() should_equal false;
      doomed_directory.exists() should_equal false;
    });

    sts!.test("move empty dir", {
      original_directory = test_directory./("/zork");
      original_directory.CreateDirAll(true).expect();

      new_directory = test_directory./("/blork");
      Rename(&original_directory, &new_directory);

      original_directory.exists() should_equal false;
      new_directory.exists() should_equal true;
    });

    sts!.test("move full dir", {
      original_directory = test_directory./("/zork");
      original_directory.CreateDir(true).expect();
      original_directory./("inner").CreateDir(true).expect();
      original_directory./("inner")./("mork.txt").writeString("mork");

      new_directory = test_directory./("/blork");
      Rename(&original_directory, &new_directory);

      original_directory.exists() should_equal false;
      original_directory./("inner").exists() should_equal false;
      original_directory./("inner")./("mork.txt").exists() should_equal false;
      new_directory.exists() should_equal true;
      new_directory./("inner").exists() should_equal true;
      new_directory./("inner")./("mork.txt").exists() should_equal true;
    });
  });

  (suite).finish();
}

