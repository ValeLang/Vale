
fn MakeArray<T, G>(n int, generator G) Array<mut, T>
rules(
  T Ref,
  G Ref(share | borrow, _, _),
  F Prot = Prot("__call", (G, int), T))
{
  __Array<mut, T, G, F>(n, generator)
}

fn MakeImmArray<G>(n int, generator G) Array<imm, T>
rules(
  T Ref,
  G Ref(share | borrow, _, _),
  F Prot = Prot("__call", (G, int), T))
{
  __Array<imm, T, G, F>(n, generator)
}

fn toImmArray<N, E, SM>(seq &[<SM> N * E]) Array<imm, E> {
  MakeImmArray(N, { seq[_] })
}

fn toImmArray<T>(source &Array<_, T>) Array<imm, &T> {
  MakeImmArray(source.len(), &!{ source[_] })
}

fn toArray<T>(source &Array<_, T>) Array<mut, &T> {
  MakeArray(source.len(), { source[_] })
}
