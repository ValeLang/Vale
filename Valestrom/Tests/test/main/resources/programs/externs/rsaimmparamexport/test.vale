export []<imm>int as ImmIntArray;

fn range(begin int, end int) IntRange { ret IntRange(begin, end); }
struct IntRange { begin int; end int; }
fn begin(self &!IntRange) IntRangeIter { ret IntRangeIter(&self, self.begin); }
struct IntRangeIter { range &IntRange; i! int; }
fn next(self &!IntRangeIter) Opt<int> {
  if self.i < self.range.end {
    Some(set self.i = self.i + 1)
  } else {
    None<int>()
  }
}

fn expSumBytes(arr []<imm>int) int export {
  sum! = 0;
  l = len(arr);
  foreach i in 0..l { set sum = sum + arr[i]; }
  ret sum;
}

fn extSumBytes(arr []<imm>int) int extern;

fn main() int export {
  a = #[](5, {_});
  ret extSumBytes(a);
}
