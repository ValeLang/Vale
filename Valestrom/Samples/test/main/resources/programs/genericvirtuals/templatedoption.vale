
interface MyOption<T> rules(T Ref) { }

struct MySome<T> rules(T Ref) {
  value T;
}
impl<T> MyOption<T> for MySome<T>;

struct MyNone<T> rules(T Ref) { }
impl<T> MyOption<T> for MyNone<T>;

fn len<T>(virtual opt &MyOption<T>) int abstract;
fn len<T>(opt &MyNone<T> impl MyOption<T>) int { 0 }
fn len<T>(opt &MySome<T> impl MyOption<T>) int { 1 }

fn main() int {
  myOpt MyOption<int> = MySome<int>(4);
  = len(myOpt);
}
