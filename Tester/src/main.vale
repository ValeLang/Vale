import stdlib.command.*;
import stdlib.flagger.*;


struct TestSuite {
  cwd Path;
  verbose bool;
  valec_path str;
  common_build_args List<str>;
  test_filters List<str>;
  max_concurrent_tests int;
  midas_tests_dir Path;

  test_instances List<TestInstance>;
  num_successes! int;
  num_failures! int;
}

struct TestInstance {
  test_name str;
  region str;
  expected_return_code int;
  test_build_dir Path;
  process Subprocess;
  run_args List<str>;
}

func matches_filters(name str, filters &List<str>) bool {
  i = 0;
  while (i < filters.len()) {
    filter = filters.get(i);
    if (not name.contains(filter)) {
      ret false;
    }
    set i = i + 1;
  }
  ret true;
}

exported func main() int {
  all_args_list = List<str>();
  i = 0;
  while (i < numMainArgs()) {
    all_args_list.add(getMainArg(i));
    mut i = i + 1;
  }
  all_args = all_args_list.toImmArray();


  driver_path = Path(all_args_list.get(0))&.resolve();
  cwd = driver_path.directory();
  compiler_dir = cwd.clone();

  flags =
      [#][
        Flag(
          "--midas_path",
          FLAG_STR(),
          "Path to Midas executable.",
          "../Midas/build",
          "Alternate path for Midas, the codegen phase binary."),
        Flag(
          "--valestrom_path",
          FLAG_STR(),
          "Path to Valestrom jar.",
          "../Valestrom",
          "Alternate path for Valestrom, the frontend phase binary."),
        Flag(
          "--builtins_dir",
          FLAG_STR(),
          "Directory containing Midas builtins.",
          "../Midas/src/builtins",
          "Alternate path for the temporary C builtin functions."),
        Flag(
          "--valec_path",
          FLAG_STR(),
          "Path to valec executable.",
          "../Driver/build/valec",
          "Path to valec executable."),
        Flag(
          "--midas_tests_dir",
          FLAG_STR(),
          "Directory containing Midas tests.",
          "../Midas/build",
          "Directory containing Midas tests."),
        Flag(
          "--valestrom_tests_dir",
          FLAG_STR(),
          "Directory containing Valestrom's tests.",
          "../Valestrom",
          "Directory containing Valestrom's tests."),
        Flag(
          "--concurrent",
          FLAG_INT(),
          "How many tests to run in parallel.",
          "10",
          "How many tests to run in parallel."),
        Flag(
          "--verbose",
          FLAG_BOOL(),
          "Print more progress details.",
          "true",
          "Print more progress details.")];
  parsed_flags = flags.parse_all_flags(all_args);


  common_build_args = List<str>();
  common_build_args.add("build");

  max_concurrent_tests = parsed_flags.get_int_flag("--concurrent", 10);

  valestrom_path = Path(parsed_flags.expect_string_flag(&flags, "--valestrom_path"));
  common_build_args.add("--valestrom_path_override");
  common_build_args.add(valestrom_path.str());

  midas_path = Path(parsed_flags.expect_string_flag(&flags, "--midas_path"));
  common_build_args.add("--midas_path_override");
  common_build_args.add(midas_path.str());

  builtins_dir = Path(parsed_flags.expect_string_flag(&flags, "--builtins_dir"));
  common_build_args.add("--builtins_dir_override");
  common_build_args.add(builtins_dir.str());

  valec_path = Path(parsed_flags.expect_string_flag(&flags, "--valec_path"));

  midas_tests_dir = Path(parsed_flags.expect_string_flag(&flags, "--midas_tests_dir"));
  valestrom_tests_dir = Path(parsed_flags.expect_string_flag(&flags, "--valestrom_tests_dir"));

  verbose = parsed_flags.get_bool_flag("--verbose", false);

  include_regions = List<str>();
  test_filters = List<str>();


  if (verbose) {
    println("Parsing command line inputs...")
  }

  input_i = 0;
  while (input_i < parsed_flags.unrecognized_inputs.len()) {
    unrecognized_input = parsed_flags.unrecognized_inputs.get(input_i);
    if (unrecognized_input.startsWith("--")) {
      panic("Unrecognized input: " + unrecognized_input);
    } else if (unrecognized_input.startsWith("@")) {
      region = unrecognized_input.slice(1).str();
      include_regions.add(region);
    } else {
      test_filters.add(unrecognized_input);
    }
    set input_i = input_i + 1;
  }

  samples_path = valestrom_tests_dir./("Tests/test/main/resources")&.resolve();


  if (include_regions.len() == 0) {
    include_regions.add("assist");
    include_regions.add("naive-rc");
    include_regions.add("resilient-v3");
    include_regions.add("resilient-v4");
    include_regions.add("unsafe-fast");
  }

  if (verbose) {
    println("Parsed command line inputs...");
  }

  suite =
      TestSuite(
          cwd,
          verbose,
          valec_path.str(),
          common_build_args,
          test_filters,
          max_concurrent_tests,
          midas_tests_dir.clone(),
          List<TestInstance>(),
          0,
          0);

  test_instances = List<TestInstance>();

  if (include_regions.exists({ _ == "assist" })) {
    region = "assist";
    suite.StartTest(7, "addret", samples_path./("programs/addret.vale"), &List<str>(), region);
    suite.StartTest(42, "add64ret", samples_path./("programs/add64ret.vale"), &List<str>(), region);
    suite.StartTest(42, "comparei64", samples_path./("programs/comparei64.vale"), &List<str>(), region);
    suite.StartTest(42, "truncate", samples_path./("programs/truncate.vale"), &List<str>(), region);
    suite.StartTest(42, "floatarithmetic", samples_path./("programs/floatarithmetic.vale"), &List<str>(), region);
    suite.StartTest(42, "floateq", samples_path./("programs/floateq.vale"), &List<str>(), region);
    suite.StartTest(42, "concatstrfloat", samples_path./("programs/concatstrfloat.vale"), &List<str>(), region);
    suite.StartTest(11, "strlenextern", samples_path./("programs/externs/strlenextern"), &List<str>(), region);
    suite.StartTest(42, "voidreturnexport", samples_path./("programs/externs/voidreturnexport"), &List<str>(), region);
    suite.StartTest(42, "structimmparamextern", samples_path./("programs/externs/structimmparamextern"), &List<str>(), region);
    suite.StartTest(42, "structimmparamexport", samples_path./("programs/externs/structimmparamexport"), &List<str>(), region);
    suite.StartTest(42, "structimmparamdeepextern", samples_path./("programs/externs/structimmparamdeepextern"), &List<str>(), region);
    suite.StartTest(42, "structimmparamdeepexport", samples_path./("programs/externs/structimmparamdeepexport"), &List<str>(), region);
    suite.StartTest(42, "interfaceimmparamextern", samples_path./("programs/externs/interfaceimmparamextern"), &List<str>(), region);
    suite.StartTest(42, "interfaceimmparamexport", samples_path./("programs/externs/interfaceimmparamexport"), &List<str>(), region);
    suite.StartTest(42, "interfaceimmparamdeepextern", samples_path./("programs/externs/interfaceimmparamdeepextern"), &List<str>(), region);
    suite.StartTest(42, "interfaceimmparamdeepexport", samples_path./("programs/externs/interfaceimmparamdeepexport"), &List<str>(), region);
    suite.StartTest(42, "rsaimmreturnextern", samples_path./("programs/externs/rsaimmreturnextern"), &List<str>(), region);
    suite.StartTest(42, "rsaimmreturnexport", samples_path./("programs/externs/rsaimmreturnexport"), &List<str>(), region);
    suite.StartTest(10, "rsaimmparamextern", samples_path./("programs/externs/rsaimmparamextern"), &List<str>(), region);
    suite.StartTest(10, "rsaimmparamexport", samples_path./("programs/externs/rsaimmparamexport"), &List<str>(), region);
    suite.StartTest(20, "rsaimmparamdeepextern", samples_path./("programs/externs/rsaimmparamdeepextern"), &List<str>(), region);
    suite.StartTest(42, "rsaimmparamdeepexport", samples_path./("programs/externs/rsaimmparamdeepexport"), &List<str>(), region);
    suite.StartTest(42, "ssaimmparamextern", samples_path./("programs/externs/ssaimmparamextern"), &List<str>(), region);
    suite.StartTest(42, "ssaimmparamexport", samples_path./("programs/externs/ssaimmparamexport"), &List<str>(), region);
    suite.StartTest(42, "ssaimmreturnextern", samples_path./("programs/externs/ssaimmreturnextern"), &List<str>(), region);
    suite.StartTest(42, "ssaimmreturnexport", samples_path./("programs/externs/ssaimmreturnexport"), &List<str>(), region);
    suite.StartTest(42, "ssaimmparamdeepextern", samples_path./("programs/externs/ssaimmparamdeepextern"), &List<str>(), region);
    suite.StartTest(42, "ssaimmparamdeepexport", samples_path./("programs/externs/ssaimmparamdeepexport"), &List<str>(), region);
    suite.StartTest(6, "strreturnexport", samples_path./("programs/externs/strreturnexport"), &List<str>(), region);
    suite.StartTest(42, "smallstr", samples_path./("programs/strings/smallstr.vale"), &List<str>(), region);
    suite.StartTest(42, "immtupleaccess", samples_path./("programs/tuples/immtupleaccess.vale"), &List<str>(), region);
    suite.StartTest(42, "ssaimmfromcallable", samples_path./("programs/arrays/ssaimmfromcallable.vale"), &List<str>(), region);
    suite.StartTest(42, "ssaimmfromvalues", samples_path./("programs/arrays/ssaimmfromvalues.vale"), &List<str>(), region);
  }

  if (include_regions.exists({ _ == "resilient-v3" })) {
    region = "resilient-v3";
    suite.StartTest(116, "kldc", samples_path./("programs/structs/deadmutstruct.vale"), &List([#]["--override_known_live_true", "true"]), region);
  }

  if (include_regions.exists({ _ == "resilient-v4" })) {
    region = "resilient-v4";
    suite.StartTest(14, "tethercrash", midas_tests_dir./("tethercrash.vale"), &List<str>(), region);
  }

  include_regions.each((region) => {
    suite.StartTest(42, "mutswaplocals", samples_path./("programs/mutswaplocals.vale"), &List<str>(), region);
    suite.StartTest(5, "structimm", samples_path./("programs/structs/structimm.vale"), &List<str>(), region);
    suite.StartTest(5, "memberrefcount", samples_path./("programs/structs/memberrefcount.vale"), &List<str>(), region);
    suite.StartTest(42, "bigstructimm", samples_path./("programs/structs/bigstructimm.vale"), &List<str>(), region);
    suite.StartTest(8, "structmut", samples_path./("programs/structs/structmut.vale"), &List<str>(), region);
    suite.StartTest(42, "lambda", samples_path./("programs/lambdas/lambda.vale"), &List<str>(), region);
    suite.StartTest(42, "if", samples_path./("programs/if/if.vale"), &List<str>(), region);
    suite.StartTest(42, "upcastif", samples_path./("programs/if/upcastif.vale"), &List<str>(), region);
    suite.StartTest(42, "ifnevers", samples_path./("programs/if/ifnevers.vale"), &List<str>(), region);
    suite.StartTest(42, "mutlocal", samples_path./("programs/mutlocal.vale"), &List<str>(), region);
    suite.StartTest(42, "while", samples_path./("programs/while/while.vale"), &List<str>(), region);
    suite.StartTest(45, "foreach", samples_path./("programs/while/foreach.vale"), &List<str>(), region);
    suite.StartTest(8, "constraintRef", samples_path./("programs/constraintRef.vale"), &List<str>(), region);
    suite.StartTest(42, "ssamutfromcallable", samples_path./("programs/arrays/ssamutfromcallable.vale"), &List<str>(), region);
    suite.StartTest(42, "ssamutfromvalues", samples_path./("programs/arrays/ssamutfromvalues.vale"), &List<str>(), region);
    suite.StartTest(42, "interfaceimm", samples_path./("programs/virtuals/interfaceimm.vale"), &List<str>(), region);
    suite.StartTest(42, "interfacemut", samples_path./("programs/virtuals/interfacemut.vale"), &List<str>(), region);
    suite.StartTest(42, "structmutstore", samples_path./("programs/structs/structmutstore.vale"), &List<str>(), region);
    suite.StartTest(42, "structmutstoreinner", samples_path./("programs/structs/structmutstoreinner.vale"), &List<str>(), region);
    suite.StartTest(3, "rsaimm", samples_path./("programs/arrays/rsaimm.vale"), &List<str>(), region);
    suite.StartTest(3, "rsamut", samples_path./("programs/arrays/rsamut.vale"), &List<str>(), region);
    suite.StartTest(42, "rsamutdestroyintocallable", samples_path./("programs/arrays/rsamutdestroyintocallable.vale"), &List<str>(), region);
    suite.StartTest(42, "ssamutdestroyintocallable", samples_path./("programs/arrays/ssamutdestroyintocallable.vale"), &List<str>(), region);
    suite.StartTest(5, "rsamutlen", samples_path./("programs/arrays/rsamutlen.vale"), &List<str>(), region);
    suite.StartTest(42, "rsamutcapacity", samples_path./("programs/arrays/rsamutcapacity.vale"), &List<str>(), region);
    suite.StartTest(42, "stradd", samples_path./("programs/strings/stradd.vale"), &List<str>(), region);
    suite.StartTest(42, "strneq", samples_path./("programs/strings/strneq.vale"), &List<str>(), region);
    suite.StartTest(42, "lambdamut", samples_path./("programs/lambdas/lambdamut.vale"), &List<str>(), region);
    suite.StartTest(42, "strprint", samples_path./("programs/strings/strprint.vale"), &List<str>(), region);
    suite.StartTest(4, "inttostr", samples_path./("programs/strings/inttostr.vale"), &List<str>(), region);
    suite.StartTest(4, "i64tostr", samples_path./("programs/strings/i64tostr.vale"), &List<str>(), region);
    suite.StartTest(42, "nestedif", samples_path./("programs/if/nestedif.vale"), &List<str>(), region);
    suite.StartTest(42, "unstackifyret", samples_path./("programs/unstackifyret.vale"), &List<str>(), region);
    suite.StartTest(42, "swaprsamutdestroy", samples_path./("programs/arrays/swaprsamutdestroy.vale"), &List<str>(), region);
    suite.StartTest(42, "downcastBorrowSuccessful", samples_path./("programs/downcast/downcastBorrowSuccessful.vale"), &List<str>(), region);
    suite.StartTest(42, "downcastBorrowFailed", samples_path./("programs/downcast/downcastBorrowFailed.vale"), &List<str>(), region);
    suite.StartTest(42, "downcastOwningSuccessful", samples_path./("programs/downcast/downcastOwningSuccessful.vale"), &List<str>(), region);
    suite.StartTest(42, "downcastOwningFailed", samples_path./("programs/downcast/downcastOwningFailed.vale"), &List<str>(), region);
    suite.StartTest(42, "unreachablemoot", samples_path./("programs/unreachablemoot.vale"), &List<str>(), region);
    suite.StartTest(1, "panic", samples_path./("programs/panic.vale"), &List<str>(), region);
    suite.StartTest(42, "panicnot", samples_path./("programs/panicnot.vale"), &List<str>(), region);
    suite.StartTest(42, "nestedblocks", samples_path./("programs/nestedblocks.vale"), &List<str>(), region);
    suite.StartTest(42, "weakDropThenLockStruct", samples_path./("programs/weaks/dropThenLockStruct.vale"), &List<str>(), region);
    suite.StartTest(7, "weakLockWhileLiveStruct", samples_path./("programs/weaks/lockWhileLiveStruct.vale"), &List<str>(), region);
    suite.StartTest(7, "weakFromLocalCRefStruct", samples_path./("programs/weaks/weakFromLocalCRefStruct.vale"), &List<str>(), region);
    suite.StartTest(7, "weakFromCRefStruct", samples_path./("programs/weaks/weakFromCRefStruct.vale"), &List<str>(), region);
    suite.StartTest(7, "loadFromWeakable", samples_path./("programs/weaks/loadFromWeakable.vale"), &List<str>(), region);
    suite.StartTest(42, "weakDropThenLockInterface", samples_path./("programs/weaks/dropThenLockInterface.vale"), &List<str>(), region);
    suite.StartTest(7, "weakLockWhileLiveInterface", samples_path./("programs/weaks/lockWhileLiveInterface.vale"), &List<str>(), region);
    suite.StartTest(7, "weakFromLocalCRefInterface", samples_path./("programs/weaks/weakFromLocalCRefInterface.vale"), &List<str>(), region);
    suite.StartTest(7, "weakFromCRefInterface", samples_path./("programs/weaks/weakFromCRefInterface.vale"), &List<str>(), region);
    suite.StartTest(42, "weakSelfMethodCallWhileLive", samples_path./("programs/weaks/callWeakSelfMethodWhileLive.vale"), &List<str>(), region);
    suite.StartTest(0, "weakSelfMethodCallAfterDrop", samples_path./("programs/weaks/callWeakSelfMethodAfterDrop.vale"), &List<str>(), region);

    if (region != "naive-rc") {
      suite.StartTest(42, "interfacemutreturnexport", samples_path./("programs/externs/interfacemutreturnexport"), &List<str>(), region);
      suite.StartTest(42, "interfacemutparamexport", samples_path./("programs/externs/interfacemutparamexport"), &List<str>(), region);
      suite.StartTest(42, "structmutreturnexport", samples_path./("programs/externs/structmutreturnexport"), &List<str>(), region);
      suite.StartTest(42, "structmutparamexport", samples_path./("programs/externs/structmutparamexport"), &List<str>(), region);
      suite.StartTest(42, "structmutparamdeepexport", samples_path./("programs/externs/structmutparamdeepexport"), &List<str>(), region);
      suite.StartTest(10, "rsamutparamexport", samples_path./("programs/externs/rsamutparamexport"), &List<str>(), region);
      suite.StartTest(42, "rsamutreturnexport", samples_path./("programs/externs/rsamutreturnexport"), &List<str>(), region);
      suite.StartTest(10, "ssamutparamexport", samples_path./("programs/externs/ssamutparamexport"), &List<str>(), region);
      suite.StartTest(42, "ssamutreturnexport", samples_path./("programs/externs/ssamutreturnexport"), &List<str>(), region);
    }
  });

  if (include_regions.exists({ _ == "resilient-v3" }) or include_regions.exists({ _ == "resilient-v4" })) {
    // suite.StartCTest("twinpages", &midas_tests_dir./("twinpages/test.c"), List([]["noattemptbadwrite"]), "resilient-v3");
  }

  suite.FinishTests(0);

  successes = suite.num_successes;
  failures = suite.num_failures;

  println("Done! Passed {successes}/{successes + failures}");
  if (failures == 0) {
    ret 0;
  } else {
    ret 1;
  }
}

func StartCTest(suite &TestSuite, test_name str, input_c &Path, flags List<str>, region str) {
  if (matches_filters(test_name, &suite.test_filters)) {
    suite.FinishTests(suite.max_concurrent_tests - 1);

    println("Starting {test_name}...");
    suite.cwd./("testbuild").makeDirectory();
    test_build_dir = suite.cwd./("testbuild/{test_name}");
    test_build_dir.makeDirectory();
    process =
        (Subprocess(
            if (IsWindows()) { "cl.exe" } else { "clang" },
            &List([#][
                suite.midas_tests_dir./("twinpages/test.c").str(),
                "-o",
                test_build_dir./("main").str()
            ]))).expect();
    if (suite.verbose) {
      println("Running command: " + process.command);
    }
    suite.test_instances.add(
        TestInstance(test_name, region, 0, test_build_dir, process, flags));
  } else {
    drop(flags);
  }
}

func FinishTests(suite &TestSuite, until_this_many_left int) {
  while (suite.test_instances.len() > until_this_many_left) {
    build_instance = suite.test_instances.remove(0);
    [test_name, region, expected_return_code, test_build_dir, build_process, run_args] = build_instance;

    build_result = (build_process).capture_and_join();
    if (build_result.return_code != 0) {
      println("Error {build_result.return_code} building test {test_name} (region {region}).");
      if (build_result.stdout.len() > 0) {
        println("stdout:");
        println(build_result.stdout);
      } else {
        println("(no stdout)");
      }
      if (build_result.stderr.len() > 0) {
        println("stderr:");
        println(build_result.stderr);
      } else {
        println("(no stderr)");
      }
      set suite.num_failures = suite.num_failures + 1;
    } else {
      program_name = if (IsWindows()) { "main.exe" } else { "main" };
      run_program = test_build_dir./(program_name).str();

      run_process = (Subprocess(run_program, &run_args)).expect();
      if (suite.verbose) {
        println("Running command: " + run_process.command);
      }
      run_result = (run_process).capture_and_join();
      if (run_result.return_code != expected_return_code) {
        println("Invalid result for test {test_name} (region {region}). Expected {expected_return_code} but got {run_result.return_code}.");
        if (run_result.stdout.len() > 0) {
          println("stdout:");
          println(run_result.stdout);
        } else {
          println("(no stdout)");
        }
        if (run_result.stderr.len() > 0) {
          println("stderr:");
          println(run_result.stderr);
        } else {
          println("(no stderr)");
        }
        set suite.num_failures = suite.num_failures + 1;
      } else {
        println("Test {test_name} (region {region}) succeeded!");
        set suite.num_successes = suite.num_successes + 1;
      }
    }
  }
}

func StartBuild(
    suite &TestSuite,
    test_name str,
    vale_code_path Path,
    extra_build_flags &List<str>,
    test_build_dir &Path,
    region str)
Subprocess {
  println("Starting {test_name}, region {region}...");

  build_args = List<str>();
  suite.common_build_args.each((arg) => { build_args.add(arg); });
  build_args.add("vtest=" + vale_code_path.str());
  build_args.add("--output_dir");
  build_args.add(test_build_dir.str());
  build_args.add("--region_override");
  build_args.add(region);
  build_args.add("--llvm_ir");
  build_args.add("true");
  build_args.add("--no_std");
  build_args.add("true");

  extra_build_flags.each((flag) => {
    build_args.add(flag);
  });

  if (suite.verbose) {
    println("Starting subprocess...");
  }

  build_process = (Subprocess(suite.valec_path, &build_args)).expect();
  if (suite.verbose) {
    println("Build command: " + build_process.command);
  }
  ret build_process;
}

func StartTest(
    suite &TestSuite,
    expected_return_code int,
    test_name str,
    vale_input Path,
    extra_build_flags &List<str>,
    region str) {
  if (suite.verbose) {
    println("Considering test {test_name}...");
  }

  if (matches_filters(test_name, &suite.test_filters)) {
    suite.FinishTests(suite.max_concurrent_tests - 1);

    test_build_dir = suite.cwd./("testbuild/{test_name}_{region}");
    build_process =
        suite.StartBuild(
            test_name, vale_input, &extra_build_flags, &test_build_dir, region);
    suite.test_instances.add(
        TestInstance(
            test_name, region, expected_return_code, test_build_dir, build_process, List<str>()));
  } else {
    drop(vale_input);
  }
}