
sealed interface MyOption { }

struct MySome {
  value MyList;
}
impl MyOption for MySome;

struct MyNone { }
impl MyOption for MyNone;


struct MyList {
  value int;
  next MyOption;
}

func sum(list &MyList) int {
  list.value + sum(&list.next)
}

abstract func sum(virtual opt &MyOption) int;
func sum(opt &MyNone) int { ret 0; }
func sum(opt &MySome) int {
   sum(&opt.value)
}


exported func main() int {
  list = MyList(7, MySome(MyList(17, MySome(MyList(18, MyNone())))));
  ret sum(&list);
}
