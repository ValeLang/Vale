
sealed interface XOpt<T> where T Ref { }
struct XSome<T> where T Ref { value T; }
impl<T> XOpt<T> for XSome<T>;
struct XNone<T> where T Ref { }
impl<T> XOpt<T> for XNone<T>;

abstract func getOr<T>(virtual opt &XOpt<T>, default T) T;
func getOr<T>(opt &XNone<T> impl XOpt<T>, default T) T {
  ret default;
}
func getOr<T>(opt &XSome<T> impl XOpt<T>, default T) T {
  ret opt.value;
}

exported func main() int {
  a XOpt<int> = XSome(9);
  ret a.getOr<int>(12);
}
