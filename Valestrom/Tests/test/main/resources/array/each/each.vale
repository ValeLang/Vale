
fn each<M, N, T, F>(arr A, func F) void
rules(A Ref(_, _, [<M> N * T])) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func(arr[i]);
    set i = i + 1;
  }
}

fn eachI<M, N, T, F>(arr A, func F) void
rules(A Ref(_, _, [<M> N * T])) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func(i, arr[i]);
    set i = i + 1;
  }
}

fn each<M, T, F>(arr A, func F) void
rules(A Ref(_, _, Array<M, T>)) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func(arr[i]);
    set i = i + 1;
  }
}

fn eachI<F>(arr A, func F) void
rules(A Ref(_, _, Array<_, _>)) {
  i! = 0;
  l = len(&arr);
  while (i < l) {
    func(i, arr[i]);
    set i = i + 1;
  }
}
