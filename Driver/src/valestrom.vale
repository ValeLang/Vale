
fn invoke_valestrom(
  valestrom_dir &Path,
  project_directories &List<ProjectDirectoryDeclaration>,
  project_vale_inputs &List<ProjectValeInputDeclaration>,
  project_non_vale_inputs &List<ProjectNonValeInputDeclaration>,
  benchmark bool,
  verbose bool,
  include_builtins bool,
  output_vast bool,
  output_vpst bool,
  output_dir &Path)
Subprocess {
  println("In invoke_valestrom");
  program = if (IsWindows()) { "java.exe" } else { "java" };

  valestrom_path = valestrom_dir./("Valestrom.jar");
  if (not valestrom_path.exists()) {
    panic("Cannot find Valestrom.jar at: " + valestrom_path.str());
  }

  command_line_args = List<str>();
  command_line_args!.add("-cp");
  command_line_args!.add(valestrom_dir./("Valestrom.jar").str());
  command_line_args!.add("net.verdagon.vale.driver.Driver");
  command_line_args!.add("build");
  command_line_args!.add("--output-dir");
  command_line_args!.add(output_dir.str());

  if (benchmark) {
    command_line_args!.add("--benchmark");
  }
  if (verbose) {
    command_line_args!.add("--verbose");
  }
  if (not include_builtins) {
    command_line_args!.add("--include-builtins false");
  }
  if (not output_vast) {
    command_line_args!.add("--output-vast false");
  }
  if (not output_vpst) {
    command_line_args!.add("--output-vpst false");
  }

  project_directories.each((declaration){
    command_line_args!.add(declaration.project_name + "=" + declaration.path.resolve().str());
  });

  project_vale_inputs.each((declaration){
    command_line_args!.add(declaration.project_name + "=" + declaration.path.resolve().str());
  });

  println("invoke_valestrom calling Subprocess");
  x = (Subprocess(program, &command_line_args)).expect();
  println("In invoke_valestrom, returning!");
  ret x;
}
