
struct StrSlice imm {
  string str;
  begin int;
  end int;
  // Will soon have a private bytesBegin and bytesEnd
}

func newStrSlice(string str, begin int, end int) StrSlice {
  vassert(begin >= 0, "slice begin was negative!");
  vassert(end >= 0, "slice end was negative!");
  vassert(begin <= string.len(), "slice begin was more than length!");
  vassert(end <= string.len(), "slice end was more than length!");
  vassert(end >= begin, "slice end was before begin!");

  ret StrSlice(string, begin, end);
  // this.string = string;
  // this.begin = begin;
  // this.end = end;
}

func has(haystack str, needle str) bool { has(haystack.slice(), needle.slice()) }
func has(haystack StrSlice, needle str) bool { has(haystack, needle.slice()) }
func has(haystack str, needle StrSlice) bool { has(haystack.slice(), needle) }
func has(haystack StrSlice, needle StrSlice) bool { not find(haystack, needle).isEmpty() }

func find(haystack str, needle str) Opt<StrSlice> { find(haystack.slice(), needle.slice()) }
func find(haystack str, needle StrSlice) Opt<StrSlice> { find(haystack.slice(), needle) }
func find(haystack StrSlice, needle str) Opt<StrSlice> { find(haystack, needle.slice()) }
func find(haystack StrSlice, needle StrSlice) Opt<StrSlice> {
  offsetAfterBegin =
      strindexof(
          haystack.string, haystack.begin, haystack.end,
          needle.string, needle.begin, needle.end);

  if offsetAfterBegin < 0 {
    r Opt<StrSlice> = None<StrSlice>();
    r
  } else {
    r Opt<StrSlice> =
        Some<StrSlice>(
            newStrSlice(
                haystack.string,
                haystack.begin + offsetAfterBegin,
                haystack.begin + offsetAfterBegin + needle.len()));
    r
  }
}

func slice(s str) StrSlice {
  newStrSlice(s, 0, s.len())
}

func slice(s str, begin int) StrSlice { s.slice().slice(begin) }
func slice(s StrSlice, begin int) StrSlice {
  newBegin = s.begin + begin;
  vassert(newBegin <= s.string.len(), "slice begin is more than string length!");
  newStrSlice(s.string, newBegin, s.end)
}

func len(s StrSlice) int {
  ret s.end - s.begin;
}

func slice(s str, begin int, end int) StrSlice {
  newStrSlice(s, begin, end)
}

func slice(s StrSlice, begin int, end int) StrSlice {
  newGlyphBeginOffset = s.begin + begin;
  newGlyphEndOffset = s.begin + end;
  newStrSlice(s.string, newGlyphBeginOffset, newGlyphEndOffset)
}


func str(s StrSlice) str {
  ret substring(s.string, s.begin, s.len());
}


func !=(a str, b StrSlice) bool { a.slice() != b }
func !=(a StrSlice, b str) bool { a != b.slice() }

func ==(a str, b str) bool { a.slice() == b.slice() }
func ==(a str, b StrSlice) bool { a.slice() == b }
func ==(a StrSlice, b str) bool { a == b.slice() }
func ==(a StrSlice, b StrSlice) bool {
  streq(a.string, a.begin, a.end, b.string, b.begin, b.end)
}

func <=>(a str, b str) int { a.slice() <=> b.slice() }
func <=>(a str, b StrSlice) int { a.slice() <=> b }
func <=>(a StrSlice, b str) int { a <=> b.slice() }
func <=>(a StrSlice, b StrSlice) int {
  strcmp(a.string, a.begin, a.end, b.string, b.begin, b.end)
}

func +(a str, b StrSlice) str { a.slice() + b }
func +(a StrSlice, b str) str { a + b.slice() }
func +(a StrSlice, b StrSlice) str {
  addStr(a.string, a.begin, a.end - a.begin, b.string, b.begin, b.end - b.begin)
}

func print(s StrSlice) { printstr(s.string, s.begin, s.end - s.begin) }

func println(s StrSlice) void {
  print(s + "\n");
}

func toAscii(s str) int { s.slice().toAscii() }
func toAscii(s StrSlice) int {
  vassert(s.begin + 1 <= s.end);
  strtoascii(s.string, s.begin, s.end)
}

func fromAscii(code int) str {
  ret strfromascii(code);
}
