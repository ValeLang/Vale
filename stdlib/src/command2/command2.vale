
import stdlib.stringutils.*;
import stdlib.path.*;
import stdlib.os.*;

export Array<imm, str> as StrArray;
export Array<mut, str> as MutStrArray;

interface SubprocessStartError { }
struct UnknownSubprocessStartError { }
impl SubprocessStartError for UnknownSubprocessStartError;
struct CantFindProgramError { program str; }
impl CantFindProgramError for UnknownSubprocessStartError;
struct CantExecuteProgramError { program Path; }
impl CantExecuteProgramError for UnknownSubprocessStartError;

struct SubprocessBuilder {
  working_dir Opt<str>;
  env_vars HashMap<str, str, StrHasher, StrEquator>;
  program Opt<str>;
  args List<str>;
}
func SubprocessBuilder() SubprocessBuilder {
  SubprocessBuilderNoCommand(
      None<str>(),
      HashMap<str, str, StrHasher, StrEquator>(),
      None<str>(),
      List<str>())
}
func WithProgram(self SubprocessBuilder, program str) {
  [working_dir, env_vars, old_program, args] = self;
  vassert(old_program.isEmpty(), "SubprocessBuilder specified program twice!");
  return SubprocessBuilder(working_dir, env_vars, Some(program), args);
}
func FromDir(self SubprocessBuilder, working_dir str) {
  [old_working_dir, env_vars, program, args] = self;
  vassert(old_working_dir.isEmpty(), "SubprocessBuilder specified working dir twice!");
  return SubprocessBuilder(Some(working_dir), env_vars, program, args);
}
func WithEnvVar(self SubprocessBuilder, var_name str, value str) {
  self.env_vars.add(var_name, value);
  return self;
}
func WithArg(self SubprocessBuilder, arg str) {
  self.args.add(var_name, value);
  return self;
}
func WithArgs(self SubprocessBuilder, args &List<str>) {
  foreach arg in args {
    self.args.add(var_name, value);
  }
  return self;
}
func Start(builder SubprocessBuilder) Result<Subprocess, SubprocessStartError> {
  paths = get_env_var("PATH").split(":");

  maybe_program_path = FindProgramInPath(relative_program);

  if maybe_program_path.isEmpty() {
    return Err<Subprocess, SubprocessStartError>(CantFindProgramError(relative_program));
  }
  program_path = (maybe_program_path).get();
  if not program_path.is_file() {
    return Err<Subprocess, SubprocessStartError>(CantExecuteProgramError(program_path));
  }


  command_parts = List<str>();
  command_parts.add(program_path.str());
  foreach arg in args {
    command_parts.add(arg.str());
  }
  cmd_array = command_parts.toImmArray();

  handle = launch_command(cmd_array);
  if handle == 0i64 {
    return Err<Subprocess, SubprocessStartError>(UnknownSubprocessStartError());
  }

  retval = Subprocess(builder, handle);
  return Ok<Subprocess, SubprocessStartError>(retval);
}


#!DeriveStructDrop
struct Subprocess {
  builder SubprocessBuilder;
  handle i64;
}
//
//func Subprocess(command str) Result<Subprocess, str> {
//  list = command.split(" ");
//  cmd = str(list.get(0));
//  newlist = List<StrSlice>();
//  foreach [index, element] in list.entries() {
//    if index != 0 { newlist.add(list.get(index)); }
//  }
//  return Subprocess(cmd, &newlist);
//}
//
//func Subprocess(command str, args &List<str>) Result<Subprocess, str> {
//  newlist = List<StrSlice>();
//  foreach element in args {
//    newlist.add(slice(element));
//  }
//  return Subprocess(command, &newlist);
//}

func FindProgramInPath(relative_program str) Opt<Path> {
  path_env_var = get_env_var("PATH");
  path_strs = path_env_var.split(GetEnvPathSeparator());

  maybe_found_program_path Opt<Path> = None<Path>();
  if Path(relative_program).exists() {
    set maybe_found_program_path = Some(Path(relative_program));
  } else {
    i = 0;
    while i < path_strs.len() and maybe_found_program_path.isEmpty() {
      path_str = path_strs.get(i);
      if path_str.len() > 0 {
        possible_program_path = Path(path_str.str())./(relative_program);
        if possible_program_path.exists() {
          set maybe_found_program_path = Some(possible_program_path.clone());
        }
      }
      set i = i + 1;
    }
  }

  return maybe_found_program_path;
}

func ConsumeAndJoin<StdoutConsumer, StderrConsumer>(
  self Subprocess,
  stdout_consumer StdoutConsumer,
  stderr_consumer StderrConsumer)
int {
  CloseStdinExtern(self.handle);

  while true {
    stdout_consumed_anything = false;
    stdout_consuming = true;
    while stdout_consuming {
      s = self.read_stdout(1000);
      if s.len() > 0 {
        (&stdout_consumer)(s);
        set stdout_consumed_anything = true;
      } else {
        set stdout_consuming = false;
      }
    }

    stderr_consumed_anything = false;
    stderr_consuming = true;
    while stderr_consuming {
      s = self.read_stderr(1000);
      if s.len() > 0 {
        (&stderr_consumer)(s);
        set stderr_consumed_anything = true;
      } else {
        set stderr_consuming = false;
      }
    }

    if not stdout_consumed_anything and not stderr_consumed_anything and not self.alive() {
      break;
    }
  }

  return Join(self);
}

func PrintAndJoin(self Subprocess) Result<(), int> {
  x = ConsumeAndJoin(
    self,
    &(stdout_chunk) => {
      print(stdout_chunk);
    },
    &(stderr_chunk) => {
      print(stderr_chunk);
    });
  return x;
}

struct ExecResult {
  return_code int;
  stdout str;
  stderr str;
}

func expect_or<F>(result &ExecResult, func F)
str
where func(&F, &ExecResult)void]
{
  if result.return_code != 0 {
    func(result);
  }
  return result.stdout;
}

func CaptureAndJoin(self Subprocess) ExecResult {
  stdout_builder = StringBuilder();
  stderr_builder = StringBuilder();
  return_code =
      ConsumeAndJoin(
          self,
          &(stdout_chunk) => { stdout_builder.print(stdout_chunk); },
          &(stderr_chunk) => { stderr_builder.print(stderr_chunk); });
  return ExecResult(return_code, stdout_builder.str(), stderr_builder.str());
}

func Join(self Subprocess) int {
  status = JoinExtern(self.handle);
  DestroyExtern(self.handle);
  return status;
}

func Alive(self &Subprocess) bool {
  return AliveExtern(self.handle);
}

func ReadAllStdout(self &Subprocess) str {
  builder = StringBuilder();

  running = true;
  while running {
    s = self.ReadStdoutChunk(1000);
    builder.print(s);
    if s.len() == 0 and not self.alive() {
      set running = false;
    }
  }

  return builder.str();
}

func ReadStdout(self &Subprocess, len int) str {
  return ReadStdoutExtern(self.handle, len);
}
func read_stderr(self &Subprocess, len int) str {
  return read_stderr(self.handle, len);
}

extern func get_env_var(name str) str;
extern func launch_command(args Array<imm, str>) i64;
extern func write_stdin(cmd i64, s str);
extern func close_stdin(cmd i64);
extern func ReadStdoutExtern(cmd i64, len int) str;
extern func read_stderr(cmd i64, len int) str;
extern func join(cmd i64) int;
extern func alive(cmd i64) bool;
extern func destroy(cmd i64);
