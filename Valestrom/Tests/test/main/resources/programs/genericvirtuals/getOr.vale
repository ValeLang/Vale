
interface XOpt<T> sealed rules(T Ref) { }
struct XSome<T> rules(T Ref) { value T; }
impl<T> XOpt<T> for XSome<T>;
struct XNone<T> rules(T Ref) { }
impl<T> XOpt<T> for XNone<T>;

fn getOr<T>(virtual opt *XOpt<T>, default T) T abstract;
fn getOr<T>(opt *XNone<T> impl XOpt<T>, default T) T {
  default
}
fn getOr<T>(opt *XSome<T> impl XOpt<T>, default T) T {
  opt.value
}

fn main() int export {
  a XOpt<int> = XSome(9);
  = a.getOr<int>(12);
}
