import stdlib.command.*;
import stdlib.flagger.*;
import stdlib.path.*;

//fn removeAllRecursively(path &Path) {
//  if path.is_dir() {
//    iterdir(path).each((entry) => {
//      removeAllRecursively(entry);
//    });
//  }
//  path.remove();
//}

struct ProjectDirectoryDeclaration {
  project_name str;
  path Path;
}

struct ProjectValeInputDeclaration {
  project_name str;
  path Path;
}

struct ProjectNonValeInputDeclaration {
  project_name str;
  path Path;
}

func list_vasts(output_dir &Path) List<Path> {
  vast_files = List<Path>();
  output_dir./("vast")&.iterdir()&.each((child) => {
    if child.name().endsWith(".vast") {
      vast_files.add(child.clone());
    }
  });
  return vast_files;
}

func build_stuff(compiler_dir &Path, all_args &Array<imm, str>) {


  windows = IsWindows();

  // self.vs_path: str = ''
  // if self.windows:
  //     self.vs_path = os.environ.get('VCInstallDir', '')
  //     if len(self.vs_path) == 0:
  //         print('No VCInstallDir in env! To fix:', file=sys.stderr)
  //         print('1. Make sure Visual Studio is installed.', file=sys.stderr)
  //         print('2. Run vcvars64.bat. Example location: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat', file=sys.stderr)
  //         print('3. Run `echo %%VCInstallDir%%` to verify', file=sys.stderr)
  //         sys.exit(1)
  //     print(f"Using Visual Studio at {self.vs_path}. ", file=sys.stderr)
  // else:
  //     pass

  flags =
      [#][
        Flag(
          "--backend_path_override",
          FLAG_STR(),
          "Directory containing Backend.",
          "../Backend/build",
          "Alternate path for Backend, the codegen phase binary."),
        Flag(
          "--frontend_path_override",
          FLAG_STR(),
          "Directory containing Frontend.",
          "../Frontend",
          "Alternate path for Frontend, the frontend phase binary."),
        Flag(
          "--builtins_dir_override",
          FLAG_STR(),
          "Directory containing Backend builtins.",
          "../Backend/src/builtins",
          "Alternate path for the temporary C builtin functions."),
        Flag(
          "--clang_override",
          FLAG_STR(),
          "Path to the clang binary to ue for linking.",
          "clang",
          "Alternate path for the clang binary to use."),
        Flag(
          "--benchmark",
          FLAG_BOOL(),
          "Whether to benchmark Frontend.",
          "true",
          "Whether to benchmark Frontend."),
        Flag(
          "--verbose",
          FLAG_BOOL(),
          "Whether to print out more detailed errors.",
          "true",
          "Whether to print out more detailed errors."),
        Flag(
          "--census",
          FLAG_BOOL(),
          "Whether to add run-time checks to debug the compiler itself.",
          "true",
          "Whether to add run-time checks to debug the compiler itself."),
        Flag(
          "--asan",
          FLAG_BOOL(),
          "Whether to run with ASan.",
          "true",
          "Whether to run with ASan."),
        Flag(
          "--debug_output",
          FLAG_BOOL(),
          "Whether to print out more detailed errors.",
          "true",
          "Whether to print out more detailed errors."),
        Flag(
          "--output_vast",
          FLAG_BOOL(),
          "Whether to output VAST.",
          "false",
          "Whether to output VAST, the code's intermediate representation"),
        Flag(
          "--opt_level",
          FLAG_STR(),
          "Optimization level.",
          "O0",
          "Optimization level, between O0 and O3."),
        Flag(
          "--print_mem_overhead",
          FLAG_BOOL(),
          "Whether to output number of generation checks.",
          "false",
          "Whether to output number of generation checks."),
        Flag(
          "-g",
          FLAG_NOTHING(),
          "Include debug symbols.",
          "",
          "Whether to include debug symbols in the resulting executable."),
        Flag(
          "--output_vpst",
          FLAG_BOOL(),
          "Whether to output VPST.",
          "false",
          "Whether to output VPST, the code's parsed representation"),
        Flag(
          "--no_std",
          FLAG_BOOL(),
          "Whether to include the stdlib.",
          "false",
          "Whether to include the stdlib."),
        Flag(
          "--llvm_ir",
          FLAG_BOOL(),
          "Whether to output LLVM IR.",
          "false",
          "Whether to output LLVM IR."),
        Flag(
          "--asm",
          FLAG_BOOL(),
          "Whether to output assembly.",
          "false",
          "Whether to output assembly."),
        Flag(
          "--pic",
          FLAG_BOOL(),
          "Whether to use position independent code.",
          "false",
          "Whether to use position independent code."),
        Flag(
          "--pie",
          FLAG_BOOL(),
          "Whether to use position independent executables.",
          "false",
          "Whether to use position independent executables."),
        Flag(
          "--reuse_vast",
          FLAG_BOOL(),
          "Whether to reuse existing VAST",
          "false",
          "Whether to reuse the VAST created by (presumably) the last run."),
        Flag(
          "--enable_replaying",
          FLAG_BOOL(),
          "Whether to enable recording and replaying.",
          "false",
          "If true, the program will be able to make recordings, such that we can deterministically replay them."),
        Flag(
          "--replay_whitelist_extern",
          FLAG_STR(),
          "Makes it so replays will still call this extern function.",
          "",
          "Makes it so replays will still call this extern function, instead of skipping it and returning the original recorded value."),
        Flag(
          "--opt_level",
          FLAG_STR(),
          "How much to optimize the resulting binary.",
          "",
          "How much to optimize the resulting binary. Valid values: O0, O1, O2, O2i, O3"),
        Flag(
          "--enable_side_calling",
          FLAG_BOOL(),
          "Whether to enable fearless FFI and green threads.",
          "false",
          "If true, the program will be able to make temporary stacks without firing up threads, saving space and making extern calls a bit safer."),
        Flag(
          "--flares",
          FLAG_BOOL(),
          "Internal option, enables flares for debugging.",
          "false",
          "Internal option, enables flares for debugging."),
        Flag(
          "--run_backend",
          FLAG_BOOL(),
          "Whether to run the backend.",
          "true",
          "Whether to run the backend. True to run it, false to stop after frontend."),
        Flag(
          "--run_clang",
          FLAG_BOOL(),
          "Whether to run the clang step.",
          "true",
          "Whether to run the clang step. True to run it, false to stop after backend."),
        Flag(
          "--sanity_check",
          FLAG_BOOL(),
          "Whether to run self-diagnostics while compiling.",
          "true",
          "Whether to run self-diagnostics while compiling."),
        Flag(
          "--force_all_known_live",
          FLAG_BOOL(),
          "Whether to always gen-check, even if known live is true.",
          "false",
          "Whether to always gen-check, even if known live is true."),
        Flag(
          "--elide_checks_for_known_live",
          FLAG_BOOL(),
          "Whether to skip gen-checks for objects we know are live.",
          "true",
          "Whether to skip gen-checks for objects we know are live."),
        Flag(
          "--gen_size",
          FLAG_INT(),
          "Size in bits of the generation number.",
          "32",
          "Size in bits of the generation number.",),
        Flag(
          "--elide_checks_for_regions",
          FLAG_BOOL(),
          "Whether to skip gen-checks for immutable references.",
          "true",
          "Whether to skip gen-checks for immutable references."),
        Flag(
          "--use_atomic_rc",
          FLAG_BOOL(),
          "Whether to force it to always use atomic RC operations.",
          "false",
          "Whether to force it to always use atomic RC operations."),
        Flag(
          "--include_bounds_checks",
          FLAG_BOOL(),
          "Whether to do bounds checks.",
          "true",
          "Whether to do bounds checks."),
        Flag(
          "--print_mem_overhead",
          FLAG_BOOL(),
          "Whether to print memory overhead at program end.",
          "false",
          "Whether to print number of RC incr/decrs and generation checks."),
        Flag(
          "-o",
          FLAG_STR(),
          "Resulting executablen name",
          "main",
          "Name for the resulting executable."),
        Flag(
          "--output_dir",
          FLAG_STR(),
          "Output directory for files and binary",
          "./build",
          "The directory to put all the generated files, including the final binary."),
        Flag(
          "--region_override",
          FLAG_STR(),
          "Overrides all regions.",
          "resilient-v3",
          "Sets all regions to use the given allocator.")];

  parsed_flags = flags.parse_all_flags(all_args);


  frontend_path = compiler_dir./("Frontend.jar");
  maybe_frontend_path_override = parsed_flags.get_string_flag("--frontend_path_override");
  if not maybe_frontend_path_override.isEmpty() {
    set frontend_path = Path(maybe_frontend_path_override.get());
    if not frontend_path.is_file() {
      panic("Error: --frontend_path_override's value ({frontend_path.str()}) is not a file.");
    }
  }

  backend_program_name = if IsWindows() { "backend.exe" } else { "backend" };
  backend_path = compiler_dir./(backend_program_name);
  maybe_backend_path_override = parsed_flags.get_string_flag("--backend_path_override");
  if not maybe_backend_path_override.isEmpty() {
    set backend_path = Path(maybe_backend_path_override.get());
    if not backend_path.is_file() {
      panic("Error: --backend_path_override's value ({backend_path.str()}) is not a file.");
    }
  }

  builtins_dir = compiler_dir./("builtins");
  maybe_builtins_dir_override = parsed_flags.get_string_flag("--builtins_dir_override");
  if not maybe_builtins_dir_override.isEmpty() {
    set builtins_dir = Path(maybe_builtins_dir_override.get());
    if not builtins_dir.is_dir() {
      panic("Error: --builtins_dir_override's value ({builtins_dir.str()}) is not a directory.");
    }
  }

  maybe_clang_path_override = parsed_flags.get_string_flag("--clang_override");

  output_dir = Path(parsed_flags.get_string_flag("--output_dir", "build"));

  benchmark = parsed_flags.get_bool_flag("--benchmark", false);
  verbose = parsed_flags.get_bool_flag("--verbose", false);
  debug_output = parsed_flags.get_bool_flag("--debug_output", false);
  include_builtins = parsed_flags.get_bool_flag("--include_builtins", true);
  output_vast = parsed_flags.get_bool_flag("--output_vast", true);
  reuse_vast = parsed_flags.get_bool_flag("--reuse_vast", false);
  run_backend = parsed_flags.get_bool_flag("--run_backend", true);
  run_clang = parsed_flags.get_bool_flag("--run_clang", true);
  sanity_check = parsed_flags.get_bool_flag("--sanity_check", true);
  enable_replaying = parsed_flags.get_bool_flag("--enable_replaying", false);
  enable_side_calling = parsed_flags.get_bool_flag("--enable_side_calling", false);
  output_vpst = parsed_flags.get_bool_flag("--output_vpst", true);
  no_std = parsed_flags.get_bool_flag("--no_std", false);

  maybe_region_override = parsed_flags.get_string_flag("--region_override");
  maybe_opt_level = parsed_flags.get_string_flag("--opt_level");
  maybe_cpu = parsed_flags.get_string_flag("--cpu");
  executable_name = parsed_flags.get_string_flag("-o", "main");
  flares = parsed_flags.get_bool_flag("--flares", false);
  gen_heap = parsed_flags.get_bool_flag("--gen_heap", false);
  census = parsed_flags.get_bool_flag("--census", false);
  asan = parsed_flags.get_bool_flag("--asan", false);
  verify = parsed_flags.get_bool_flag("--verify", false);
  debug_symbols = parsed_flags.get_nothing_flag("-g");
  llvm_ir = parsed_flags.get_bool_flag("--llvm_ir", false);
  pic = parsed_flags.get_bool_flag("--pic", true);
  opt_level = parsed_flags.get_string_flag("--opt_level", "O0");
  pie = parsed_flags.get_bool_flag("--pie", true);
  asm = parsed_flags.get_bool_flag("--asm", true);
  replay_whitelist_extern = parsed_flags.get_string_flag("--replay_whitelist_extern", "");
  print_mem_overhead = parsed_flags.get_bool_flag("--print_mem_overhead", false);
  elide_checks_for_known_live = parsed_flags.get_bool_flag("--elide_checks_for_known_live", true);
  elide_checks_for_regions = parsed_flags.get_bool_flag("--elide_checks_for_regions", true);
  gen_size = parsed_flags.get_int_flag("--gen_size", 32);
  use_atomic_rc = parsed_flags.get_bool_flag("--use_atomic_rc", false);
  include_bounds_checks = parsed_flags.get_bool_flag("--include_bounds_checks", true);
  force_all_known_live = parsed_flags.get_bool_flag("--force_all_known_live", false);

  if verbose {
    println("Parsing command line inputs...");
  }

  parsed_flags.unrecognized_inputs.remove(0);

  project_directory_declarations = List<ProjectDirectoryDeclaration>();
  project_vale_input_declarations = List<ProjectValeInputDeclaration>();
  project_non_vale_input_declarations = List<ProjectNonValeInputDeclaration>();

  if not no_std {
    project_directory_declarations.add(ProjectDirectoryDeclaration("stdlib", compiler_dir./("stdlib")./("src")));
  }


  while parsed_flags.unrecognized_inputs.len() > 0 {
    flag = parsed_flags.unrecognized_inputs.get(0);
    parsed_flags.unrecognized_inputs.remove(0);

    if flag.startsWith("--") {
      panic("Unrecognized option: " + flag);
    }

    maybe_project_name_and_path_str = flag.splitOnce("=");
    if not maybe_project_name_and_path_str.isEmpty() {
      [project_name, path_str] = maybe_project_name_and_path_str.get();
      path = Path(path_str.str())&.resolve();
      if path.is_dir() {
        project_directory_declarations.add(ProjectDirectoryDeclaration(project_name.str(), path));
      } else {
        if path.name().endsWith(".vale") or path.name().endsWith(".vpst") {
          project_vale_input_declarations.add(ProjectValeInputDeclaration(project_name.str(), path));
        } else {
          project_non_vale_input_declarations.add(ProjectNonValeInputDeclaration(project_name.str(), path));
        }
      }
    } else {
      panic("Unrecognized input: " + flag);
    }
  }

  if not frontend_path.exists() {
    panic("Cannot find Frontend directory: " + frontend_path.str());
  }
  if not backend_path.exists() {
    panic("Cannot find Backend directory: " + backend_path.str());
  }
  if not builtins_dir.exists() {
    panic("Cannot find builtins directory: " + builtins_dir.str());
  }

  if verbose {
    println("Invoking Frontend...");
  }

  if reuse_vast {
    if list_vasts(&output_dir)&.len() == 0 {
      panic("Error: --reuse_vast specified, but no .vast files found in " + output_dir.str() + ".");
    }
  } else {
    if output_dir.exists() {
      println("Deleting existing {output_dir.str()}.");
      output_dir.RemoveDirAll().expect();
      vassert(not output_dir.exists(), "Removing old dir {output_dir.str()} failed!");
    }
    output_dir.CreateDirAll(true);
    frontend_process =
        invoke_frontend(
            &frontend_path,
            &project_directory_declarations,
            &project_vale_input_declarations,
            &project_non_vale_input_declarations,
            benchmark,
            sanity_check,
            verbose,
            debug_output,
            include_builtins,
            output_vast,
            output_vpst,
            &output_dir);
    println("Running:\n" + frontend_process.command);
    frontend_return_code = (frontend_process).print_and_join();
    if frontend_return_code != 0 {
      panic("Frontend returned error code {frontend_return_code}, aborting.");
    }
  }

//            vast_file = None
//            if len(namespaces_to_build) > 0 and len(user_vast_files) == 0:
//                proc = self.frontend("build", namespaces_to_build, user_frontend_inputs, frontend_options)
//
//                if proc.returncode == 0:
//                    vast_file = self.build_dir / "build.vast"
//                    pass
//                elif proc.returncode == 22:
//                    print(proc.stdout + "\n" + proc.stderr)
//                    sys.exit(22)
//                else:
//                    print(f"Internal error while compiling {user_frontend_inputs}:\n" + proc.stdout + "\n" + proc.stderr)
//                    sys.exit(proc.returncode)
//            elif len(user_vast_files) > 0 and len(namespaces_to_build) == 0:
//                if len(user_vast_files) > 1:
//                    print("Can't have more than one VAST file!")
//                    sys.exit(1)
//                vast_file = user_vast_files[0]
//            elif len(user_vast_files) == 0 and len(namespaces_to_build) == 0:
//                print(f"No inputs found!")
//                sys.exit(1)
//            else:
//                print(f"Both a .vast and non-vast files were specified! If a .vast is specified, it must be the only input.")
//                sys.exit(1)

  if not run_backend {
    println("Not running backend, stopping here.");
    return void();
  }

  if verbose {
    println("Invoking Backend...")
  }

  vast_files = list_vasts(&output_dir);

  backend_process =
      invoke_backend(
          &backend_path,
          &vast_files,
          &output_dir,
          &maybe_region_override,
          &maybe_opt_level,
          &maybe_cpu,
          executable_name,
          flares,
          gen_heap,
          census,
          verify,
          opt_level,
          llvm_ir,
          asm,
          enable_replaying,
          replay_whitelist_extern,
          enable_side_calling,
          pic,
          print_mem_overhead,
          elide_checks_for_known_live,
          elide_checks_for_regions,
          use_atomic_rc,
          gen_size,
          force_all_known_live,
          include_bounds_checks);
  println("Running:\n" + backend_process.command);
  backend_return_code = (backend_process).print_and_join();
  if backend_return_code != 0 {
    panic("Backend returned error code {backend_return_code}, aborting.");
  }

  if not run_clang {
    println("Not running clang, stopping here.");
    return void();
  }

  if verbose {
    println("Collecting cc inputs...")
  }

  clang_inputs = List<Path>();
  if windows {
    clang_inputs.add(output_dir./("build.obj"));
  } else {
    clang_inputs.add(output_dir./("build.o"));
  }

  output_dir.iterdir()&.each((output_file) => {
    if output_file.name().endsWith(".c") {
      clang_inputs.add(output_file.clone());
    }
  });

  builtins_dir.iterdir()&.each((output_file) => {
    if output_file.name().endsWith(".c") {
      clang_inputs.add(output_file.clone());
    }
  });

  project_names = List<str>();

  vast_files.each((vast_file) => {
    package_coord_str = vast_file.name().slice(0, vast_file.name().len() - ".vast".len());
    package_coord_parts = package_coord_str.split(".");
    project_name = package_coord_parts.get(0);
    package_coord_parts.remove(0);
    package_steps = package_coord_parts;

    if not project_names.exists({ _ == project_name }) {
      project_names.add(project_name.str());
    }

    project_directory_declarations.each((project_directory_declaration) => {
      if project_directory_declaration.project_name == project_name {
        package_native_dir = project_directory_declaration.path.clone();
        package_steps.each((package_step) => {
          set package_native_dir = package_native_dir./(package_step.str());
        });
        possible_native_dir = package_native_dir./("native");

        if possible_native_dir.exists() {
          possible_native_dir.iterdir()&.each((native_dir_child) => {
            if native_dir_child.name().endsWith(".c") {
              clang_inputs.add(native_dir_child.clone());
            }
          });
        }
      }
    });
  });

  abi_dir = output_dir./("abi");

  project_names.each((project_name) => {

    possible_generated_dir = abi_dir./(project_name);
    if possible_generated_dir.exists() {
      if not possible_generated_dir.is_dir() {
        panic("Generated dir is not a directory: " + possible_generated_dir.str());
      }

      possible_generated_dir.iterdir()&.each((native_dir_child) => {
        if native_dir_child.name().endsWith(".c") {
          clang_inputs.add(native_dir_child.clone());
        }
      });
    }

    project_non_vale_input_declarations.each((project_non_vale_input_declaration) => {
      if project_non_vale_input_declaration.project_name == project_name {
        clang_inputs.add(project_non_vale_input_declaration.path.clone());
      }
    });
  });

  if verbose {
    println("Invoking cc...")
  }

  clang_process =
      invoke_clang(
          windows,
          &maybe_clang_path_override,
          &clang_inputs,
          &executable_name,
          asan,
          debug_symbols,
          &output_dir,
          pic,
          pie);
  println("Running:\n" + clang_process.command);
  clang_return_code = (clang_process).print_and_join();
  if clang_return_code != 0 {
    panic("clang returned error code {clang_return_code}, aborting.");
  }
}
