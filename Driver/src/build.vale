import stdlib.command.*;
import stdlib.flagger.*;
import stdlib.path.*;

//fn removeAllRecursively(path &Path) {
//  if path.is_dir() {
//    iterdir(path).each((entry) => {
//      removeAllRecursively(entry);
//    });
//  }
//  path.remove();
//}

struct ProjectDirectoryDeclaration {
  project_name str;
  path Path;
}

struct ProjectValeInputDeclaration {
  project_name str;
  path Path;
}

struct ProjectNonValeInputDeclaration {
  project_name str;
  path Path;
}

func list_vasts(output_dir &Path) List<Path> {
  vast_files = List<Path>();
  output_dir./("vast")&.iterdir()&.each((child) => {
    if child.name().endsWith(".vast") {
      vast_files.add(child.clone());
    }
  });
  ret vast_files;
}

func build_stuff(compiler_dir &Path, all_args &Array<imm, str>) {


  windows = IsWindows();

  // self.vs_path: str = ''
  // if self.windows:
  //     self.vs_path = os.environ.get('VCInstallDir', '')
  //     if len(self.vs_path) == 0:
  //         print('No VCInstallDir in env! To fix:', file=sys.stderr)
  //         print('1. Make sure Visual Studio is installed.', file=sys.stderr)
  //         print('2. Run vcvars64.bat. Example location: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat', file=sys.stderr)
  //         print('3. Run `echo %%VCInstallDir%%` to verify', file=sys.stderr)
  //         sys.exit(1)
  //     print(f"Using Visual Studio at {self.vs_path}. ", file=sys.stderr)
  // else:
  //     pass

  flags =
      [#][
        Flag(
          "--midas_path_override",
          FLAG_STR(),
          "Directory containing Midas.",
          "../Midas/build",
          "Alternate path for Midas, the codegen phase binary."),
        Flag(
          "--valestrom_path_override",
          FLAG_STR(),
          "Directory containing Valestrom.",
          "../Valestrom",
          "Alternate path for Valestrom, the frontend phase binary."),
        Flag(
          "--builtins_dir_override",
          FLAG_STR(),
          "Directory containing Midas builtins.",
          "../Midas/src/builtins",
          "Alternate path for the temporary C builtin functions."),
        Flag(
          "--benchmark",
          FLAG_BOOL(),
          "Whether to benchmark Valestrom.",
          "true",
          "Whether to benchmark Valestrom."),
        Flag(
          "--verbose",
          FLAG_BOOL(),
          "Whether to print out more detailed errors.",
          "true",
          "Whether to print out more detailed errors."),
        Flag(
          "--census",
          FLAG_BOOL(),
          "Whether to add run-time checks to debug the compiler itself.",
          "true",
          "Whether to add run-time checks to debug the compiler itself."),
        Flag(
          "--asan",
          FLAG_BOOL(),
          "Whether to run with ASan.",
          "true",
          "Whether to run with ASan."),
        Flag(
          "--debug_output",
          FLAG_BOOL(),
          "Whether to print out more detailed errors.",
          "true",
          "Whether to print out more detailed errors."),
        Flag(
          "--output_vast",
          FLAG_BOOL(),
          "Whether to output VAST.",
          "false",
          "Whether to output VAST, the code's intermediate representation"),
        Flag(
          "-g",
          FLAG_NOTHING(),
          "Include debug symbols.",
          "",
          "Whether to include debug symbols in the resulting executable."),
        Flag(
          "--output_vpst",
          FLAG_BOOL(),
          "Whether to output VPST.",
          "false",
          "Whether to output VPST, the code's parsed representation"),
        Flag(
          "--no_std",
          FLAG_BOOL(),
          "Whether to include the stdlib.",
          "false",
          "Whether to include the stdlib."),
        Flag(
          "--llvm_ir",
          FLAG_BOOL(),
          "Whether to output LLVM IR.",
          "false",
          "Whether to output LLVM IR."),
        Flag(
          "--reuse_vast",
          FLAG_BOOL(),
          "Whether to reuse existing VAST",
          "false",
          "Whether to reuse the VAST created by (presumably) the last run."),
        Flag(
          "--override_known_live_true",
          FLAG_BOOL(),
          "Whether to always gen-check, even if known live is true.",
          "false",
          "Whether to always gen-check, even if known live is true."),
        Flag(
          "-o",
          FLAG_STR(),
          "Resulting executablen name",
          "main",
          "Name for the resulting executable."),
        Flag(
          "--output_dir",
          FLAG_STR(),
          "Output directory for files and binary",
          "./build",
          "The directory to put all the generated files, including the final binary."),
        Flag(
          "--region_override",
          FLAG_STR(),
          "Overrides all regions.",
          "resilient-v3",
          "Sets all regions to use the given allocator.")];

  parsed_flags = flags.parse_all_flags(all_args);


  valestrom_path = compiler_dir./("Valestrom.jar");
  maybe_valestrom_path_override = parsed_flags.get_string_flag("--valestrom_path_override");
  if not maybe_valestrom_path_override.isEmpty() {
    set valestrom_path = Path(maybe_valestrom_path_override.get());
    if not valestrom_path.is_file() {
      panic("Error: --valestrom_path_override's value ({valestrom_path.str()}) is not a file.");
    }
  }

  midas_program_name = if IsWindows() { "midas.exe" } else { "midas" };
  midas_path = compiler_dir./(midas_program_name);
  maybe_midas_path_override = parsed_flags.get_string_flag("--midas_path_override");
  if not maybe_midas_path_override.isEmpty() {
    set midas_path = Path(maybe_midas_path_override.get());
    if not midas_path.is_file() {
      panic("Error: --midas_path_override's value ({midas_path.str()}) is not a file.");
    }
  }

  builtins_dir = compiler_dir./("builtins");
  maybe_builtins_dir_override = parsed_flags.get_string_flag("--builtins_dir_override");
  if not maybe_builtins_dir_override.isEmpty() {
    set builtins_dir = Path(maybe_builtins_dir_override.get());
    if not builtins_dir.is_dir() {
      panic("Error: --builtins_dir_override's value ({builtins_dir.str()}) is not a directory.");
    }
  }

  output_dir = Path(parsed_flags.get_string_flag("--output_dir", "build"));

  benchmark = parsed_flags.get_bool_flag("--benchmark", false);
  verbose = parsed_flags.get_bool_flag("--verbose", false);
  debug_output = parsed_flags.get_bool_flag("--debug_output", false);
  include_builtins = parsed_flags.get_bool_flag("--include_builtins", true);
  output_vast = parsed_flags.get_bool_flag("--output_vast", true);
  reuse_vast = parsed_flags.get_bool_flag("--reuse_vast", false);
  output_vpst = parsed_flags.get_bool_flag("--output_vpst", true);
  no_std = parsed_flags.get_bool_flag("--no_std", true);

  maybe_region_override = parsed_flags.get_string_flag("--region_override");
  maybe_cpu = parsed_flags.get_string_flag("--cpu");
  executable_name = parsed_flags.get_string_flag("-o", "main");
  flares = parsed_flags.get_bool_flag("--flares", false);
  gen_heap = parsed_flags.get_bool_flag("--gen_heap", false);
  census = parsed_flags.get_bool_flag("--census", false);
  asan = parsed_flags.get_bool_flag("--asan", false);
  verify = parsed_flags.get_bool_flag("--verify", false);
  debug_symbols = parsed_flags.get_nothing_flag("-g");
  llvm_ir = parsed_flags.get_bool_flag("--llvm_ir", false);
  print_mem_overhead = parsed_flags.get_bool_flag("--print_mem_overhead", false);
  elide_checks_for_known_live = parsed_flags.get_bool_flag("--elide_checks_for_known_live", false);
  override_known_live_true = parsed_flags.get_bool_flag("--override_known_live_true", false);

  if verbose {
    println("Parsing command line inputs...")
  }

  parsed_flags.unrecognized_inputs.remove(0);

  project_directory_declarations = List<ProjectDirectoryDeclaration>();
  project_vale_input_declarations = List<ProjectValeInputDeclaration>();
  project_non_vale_input_declarations = List<ProjectNonValeInputDeclaration>();

  if not no_std {
    project_directory_declarations.add(ProjectDirectoryDeclaration("stdlib", compiler_dir./("stdlib")./("src")));
  }


  while parsed_flags.unrecognized_inputs.len() > 0 {
    flag = parsed_flags.unrecognized_inputs.get(0);
    parsed_flags.unrecognized_inputs.remove(0);

    if flag.startsWith("--") {
      panic("Unrecognized option: " + flag);
    }

    maybe_project_name_and_path_str = flag.splitOnce("=");
    if not maybe_project_name_and_path_str.isEmpty() {
      [project_name, path_str] = maybe_project_name_and_path_str.get();
      path = Path(path_str.str())&.resolve();
      if path.is_dir() {
        project_directory_declarations.add(ProjectDirectoryDeclaration(project_name.str(), path));
      } else {
        if path.name().endsWith(".vale") or path.name().endsWith(".vpst") {
          project_vale_input_declarations.add(ProjectValeInputDeclaration(project_name.str(), path));
        } else {
          project_non_vale_input_declarations.add(ProjectNonValeInputDeclaration(project_name.str(), path));
        }
      }
    } else {
      panic("Unrecognized input: " + flag);
    }
  }

  if not valestrom_path.exists() {
    panic("Cannot find Valestrom directory: " + valestrom_path.str());
  }
  if not midas_path.exists() {
    panic("Cannot find Midas directory: " + midas_path.str());
  }
  if not builtins_dir.exists() {
    panic("Cannot find builtins directory: " + builtins_dir.str());
  }

  if verbose {
    println("Invoking Valestrom...");
  }

  if reuse_vast {
    if list_vasts(&output_dir)&.len() == 0 {
      panic("Error: --reuse_vast specified, but no .vast files found in " + output_dir.str() + ".");
    }
  } else {
    if output_dir.exists() {
      dest_dir = GetTempDir()./("old_output_dir_" + str(MtpId()));
      if dest_dir.exists() {
        println("Deleting existing {dest_dir.str()}.");
        dest_dir.RemoveDirAll().expect();
        vassert(not dest_dir.exists(), "Removing old dir {dest_dir.str()} failed!");
      }
      println("Moving existing output directory {output_dir.str()} to {dest_dir.str()}.");
      output_dir.Rename(&dest_dir).expect();
    }
    output_dir.CreateDirAll(true);
    valestrom_process =
        invoke_valestrom(
            &valestrom_path,
            &project_directory_declarations,
            &project_vale_input_declarations,
            &project_non_vale_input_declarations,
            benchmark,
            verbose,
            debug_output,
            include_builtins,
            output_vast,
            output_vpst,
            &output_dir);
    println("Running:\n" + valestrom_process.command);
    valestrom_return_code = (valestrom_process).print_and_join();
    if valestrom_return_code != 0 {
      panic("Valestrom returned error code {valestrom_return_code}, aborting.");
    }
  }

//            vast_file = None
//            if len(namespaces_to_build) > 0 and len(user_vast_files) == 0:
//                proc = self.valestrom("build", namespaces_to_build, user_valestrom_inputs, valestrom_options)
//
//                if proc.returncode == 0:
//                    vast_file = self.build_dir / "build.vast"
//                    pass
//                elif proc.returncode == 22:
//                    print(proc.stdout + "\n" + proc.stderr)
//                    sys.exit(22)
//                else:
//                    print(f"Internal error while compiling {user_valestrom_inputs}:\n" + proc.stdout + "\n" + proc.stderr)
//                    sys.exit(proc.returncode)
//            elif len(user_vast_files) > 0 and len(namespaces_to_build) == 0:
//                if len(user_vast_files) > 1:
//                    print("Can't have more than one VAST file!")
//                    sys.exit(1)
//                vast_file = user_vast_files[0]
//            elif len(user_vast_files) == 0 and len(namespaces_to_build) == 0:
//                print(f"No inputs found!")
//                sys.exit(1)
//            else:
//                print(f"Both a .vast and non-vast files were specified! If a .vast is specified, it must be the only input.")
//                sys.exit(1)

  if verbose {
    println("Invoking Midas...")
  }

  vast_files = list_vasts(&output_dir);

  midas_process =
      invoke_midas(
          &midas_path,
          &vast_files,
          &output_dir,
          &maybe_region_override,
          &maybe_cpu,
          executable_name,
          flares,
          gen_heap,
          census,
          verify,
          llvm_ir,
          print_mem_overhead,
          elide_checks_for_known_live,
          override_known_live_true);
  println("Running:\n" + midas_process.command);
  midas_return_code = (midas_process).print_and_join();
  if midas_return_code != 0 {
    panic("Midas returned error code {midas_return_code}, aborting.");
  }

  if verbose {
    println("Collecting cc inputs...")
  }

  clang_inputs = List<Path>();
  if windows {
    clang_inputs.add(output_dir./("build.obj"));
  } else {
    clang_inputs.add(output_dir./("build.o"));
  }

  output_dir.iterdir()&.each((output_file) => {
    if output_file.name().endsWith(".c") {
      clang_inputs.add(output_file.clone());
    }
  });

  builtins_dir.iterdir()&.each((output_file) => {
    if output_file.name().endsWith(".c") {
      clang_inputs.add(output_file.clone());
    }
  });

  project_names = List<str>();

  vast_files.each((vast_file) => {
    package_coord_str = vast_file.name().slice(0, vast_file.name().len() - ".vast".len());
    package_coord_parts = package_coord_str.split(".");
    project_name = package_coord_parts.get(0);
    package_coord_parts.remove(0);
    package_steps = package_coord_parts;

    if not project_names.exists({ _ == project_name }) {
      project_names.add(project_name.str());
    }

    project_directory_declarations.each((project_directory_declaration) => {
      if project_directory_declaration.project_name == project_name {
        package_native_dir = project_directory_declaration.path.clone();
        package_steps.each((package_step) => {
          set package_native_dir = package_native_dir./(package_step.str());
        });
        possible_native_dir = package_native_dir./("native");

        if possible_native_dir.exists() {
          possible_native_dir.iterdir()&.each((native_dir_child) => {
            if native_dir_child.name().endsWith(".c") {
              clang_inputs.add(native_dir_child.clone());
            }
          });
        }
      }
    });
  });

  abi_dir = output_dir./("abi");

  project_names.each((project_name) => {

    possible_generated_dir = abi_dir./(project_name);
    if possible_generated_dir.exists() {
      if not possible_generated_dir.is_dir() {
        panic("Generated dir is not a directory: " + possible_generated_dir.str());
      }

      possible_generated_dir.iterdir()&.each((native_dir_child) => {
        if native_dir_child.name().endsWith(".c") {
          clang_inputs.add(native_dir_child.clone());
        }
      });
    }

    project_non_vale_input_declarations.each((project_non_vale_input_declaration) => {
      if project_non_vale_input_declaration.project_name == project_name {
        clang_inputs.add(project_non_vale_input_declaration.path.clone());
      }
    });
  });

  if verbose {
    println("Invoking cc...")
  }

  clang_process =
      invoke_clang(
          windows,
          &clang_inputs,
          &executable_name,
          asan,
          debug_symbols,
          &output_dir);
  println("Running:\n" + clang_process.command);
  clang_return_code = (clang_process).print_and_join();
  if clang_return_code != 0 {
    panic("clang returned error code {clang_return_code}, aborting.");
  }
}