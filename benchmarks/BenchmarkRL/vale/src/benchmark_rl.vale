// Returns whether we should probably re-display it next turn.
// Will be false if its something static like terrain, or true
// if it's something that moves around like a unit.
fn set_screen_cell(
    screen &!Screen,
    game &Game,
    // player_visible_locs &FxHashSet<Location>,
    loc Location) {
    foreground_color = White();
    background_color = Black();
    character! = " ";

    // println("looking up " + str(loc));
    tile? = game.get_current_level().tiles.get(loc);
    if (not tile?.isEmpty()) {
        tile = tile?^.get();
        if (tile.display_class == "dirt") {
            mut character = ".";
            mut foreground_color = Orange();
        } else if (tile.display_class == "grass") {
            mut character = ".";
            mut foreground_color = Green();
        } else if (tile.display_class == "wall") {
        // "wall" => {
            mut character = "#";
            mut foreground_color = Gray();
        } else {
            panic("unrecognized tile display class");
        }
    } else {
        drop(tile?);
    }

//     if let Some(tile) = game.get_current_level().tiles.get(&loc) {
//         if let Some(fire) = tile.get_first_component::<FireTileComponent>() {
//             character = "^";
//             foreground_color =
//                 match fire.num_turns_remaining % 3 {
//                     0 => ScreenColor::Red,
//                     1 => ScreenColor::Orange,
//                     _ => ScreenColor::OrangeYellow,
//                 };
//         }
//     }

//     if let Some(&unit_index) = game.get_current_level().unit_by_location.get(&loc) {
//         let unit = &game.units[unit_index];
//         match unit.display_class.as_str() {
//             "goblin" => {
//                 character = "g";
//                 foreground_color = ScreenColor::Green;
//             }
//             "chronomancer" => {
//                 character = "@";
//                 foreground_color = ScreenColor::Turquoise;
//             }
//             _ => panic!("unrecognized unit display class"),
//         }
//     }

//     if player_visible_locs.contains(&loc) {
//         background_color = ScreenColor::DarkGray;
//     }

    screen.set_cell(
        loc.x,
        loc.y,
        background_color,
        foreground_color,
        character);
}

// // Moves the player to the next level.
// // Returns true to continue with the game, false to exit the game.
// pub fn descend_to_next_level(mut rand: &mut LCGRand, game: &mut Game) -> bool {
//     let player_index = game.get_player_index();
//     let old_player_loc = game.get_player().loc;
//     // Remove the player from the old level's unit-by-location index.
//     game.get_current_level_mut()
//         .unit_by_location
//         .remove(&old_player_loc);

//     let player_mut = &mut game.units[player_index];

//     // Figure out the new level index.
//     let player_new_level_index = player_mut.level_index + 1;
//     // If we're descending past the last level, end the game.
//     if player_new_level_index >= game.levels.len() {
//         // End the game.
//         return false;
//     }

//     // Move the player to the new level.
//     player_mut.level_index = player_new_level_index;
//     // Update the player's location so he's not, for example, embedded in the
//     // middle of a wall, stuck helpless for all eternity.
//     let new_player_loc =
//         game.levels[player_new_level_index].find_random_walkable_unoccuped_location(&mut rand);
//     game.units[player_index].loc = new_player_loc;

//     // Add the player to the new level's unit-by-location index.
//     game.get_current_level_mut()
//         .unit_by_location
//         .insert(new_player_loc, player_index);

//     // Continue with the game.
//     return true;
// }

fn setup(
    rand &!LCGRand,
    max_width int,
    max_height int,
    num_levels int)
Game {
    game =
        Game(
            // List<Unit>(),
            List<Level>());
            //, None);

  level = make_level(max_width, max_height, &rand); // DIFFERENCE need &!
  game.levels.add(level);
//     for _ in 0..num_levels {
//         let level_index = game.levels.len();
//         game.levels.push(make_level(max_width, max_height, &mut rand));

//         // Add one goblin for every 10 walkable spaces in the level.
//         let num_walkable_locations = game.levels[level_index].get_walkable_locations().len();
//         for _ in 0..(num_walkable_locations / 10) {
//             let new_unit_loc =
//                 game.levels[level_index].find_random_walkable_unoccuped_location(&mut rand);

//             let new_unit_index = game.add_unit_to_level(
//                 level_index,
//                 new_unit_loc,
//                 10,
//                 10,
//                 Allegiance::Evil,
//                 "goblin".to_string(),
//             );
//             let new_unit = &mut game.units[new_unit_index];
//             new_unit.components.insert(Box::new(WanderUnitCapability::new()));
//             new_unit.components.insert(Box::new(AttackUnitCapability::new()));
//             new_unit.components.insert(Box::new(ChaseUnitCapability::new()));
//             new_unit.components.insert(Box::new(GoblinClaws::new()));
//             if rand.next() % 10 == 0 {
//               new_unit.components.insert(Box::new(ExplodeyUnitComponent::new()));
//             }
//         }
//     }

//     let player_loc = game.levels[0].find_random_walkable_unoccuped_location(&mut rand);
//     let player_index = game.add_unit_to_level(
//         0,
//         player_loc,
//         1000000,
//         1000000,
//         Allegiance::Good,
//         "chronomancer".to_string(),
//     );
//     game.player_index = Some(player_index);

//     let player = &mut game.units[player_index];
//     player.components.insert(Box::new(WanderUnitCapability::new()));
//     player.components.insert(Box::new(AttackUnitCapability::new()));
//     player.components.insert(Box::new(ChaseUnitCapability::new()));
//     player.components.insert(Box::new(SeekUnitCapability::new()));
//     player.components.insert(Box::new(IncendiumShortSword::new()));

    ret game;
}

// // Advance the game by 1 turn for all units.
// pub fn turn(mut rand: &mut LCGRand, mut game: &mut Game) {
//     // First, let all the tiles act.
//     let acting_tile_locs: Vec<Location> = {
//         Vec::from_iter(game.get_current_level().acting_tile_locations.keys().map(|&x| x).clone())
//     };
//     for acting_tile_loc in acting_tile_locs {
//         // Get a list of components to iterate over, so that tile components'
//         // adding and removing dont modify the units array while we're iterating.
//         let component_indices: Vec<generational_arena::Index> = game
//             .get_current_level()
//             .tiles[&acting_tile_loc]
//             .components
//             .iter()
//             .map(|(x, _)| x)
//             .collect();
//         for component_index in component_indices {
//             let game_mutator =
//                 game.get_current_level().tiles.get(&acting_tile_loc).expect("").components[component_index]
//                 .on_turn(
//                     rand,
//                     game,
//                     acting_tile_loc,
//                     component_index);
//             game_mutator(rand, game);
//         }
//     }

//     // Get a list of weak pointers to iterate over, so that units' death
//     // and spawning dont modify the units array while we're iterating.
//     let units: Vec<generational_arena::Index> = game
//         .get_current_level()
//         .unit_by_location
//         .values()
//         .map(|&x| x)
//         .collect();
//     // Now iterate over them, only considering ones that are still alive.
//     for &unit_index in units.iter() {
//         if game.units.contains(unit_index) {
//             Unit::act(unit_index, &mut rand, &mut game);
//         }
//     }
// }

fn display(
        seed int,
        maybe_screen &!Opt<Screen>,
        game &Game) {
    // let maybe_player_loc = game.units.get(game.get_player_index()).map(|p| p.loc);
    // let player_visible_locs =
    //     match maybe_player_loc {
    //         None => FxHashSet::default(),
    //         Some(player_loc) => {
    //             game.get_current_level().get_locations_within_sight(
    //                 player_loc, true, DEFAULT_SIGHT_RANGE_100)
    //         }
    //     };

    // if let Some(mut screen) = maybe_screen.as_mut() {
    if (not isEmpty(maybe_screen)) {
        screen = maybe_screen.get();

        x! = 0;
        while (x < game.get_current_level().max_width) {

            y! = 0;
            while (y < game.get_current_level().max_height) {
                loc = Location(x, y);
                set_screen_cell(
                    &screen,
                    &game,
                    // &player_visible_locs,
                    loc);

                mut y = y + 1;
            }

            mut x = x + 1;
        }
        // if let Some(player) = game.units.get(game.get_player_index()) {
        //     screen.set_status_line(format!("Seed {}   Level {}   HP: {} / {}\nTo benchmark: --seed 1337 --width 40 --height 30 --num_levels 5 --turn_delay 0 --display 0", seed, player.level_index, player.hp, player.max_hp));
        // } else {
        //     screen.set_status_line("Dead!                                      ".to_string());
        // }
        screen.paint_screen();
    }
}


fn benchmark_rl(
    seed int,
    level_width int,
    level_height int,
    num_levels int,
    should_display bool,
    turn_delay int
) {
  rand = LCGRand(seed);

    game = setup(&rand, level_width, level_height, num_levels);

    maybe_screen =
        if (should_display) {
          z Opt<Screen> =
              Some(
                newScreen(
                game.get_current_level().max_width,
                game.get_current_level().max_height));
          = z;
        } else {
          z Opt<Screen> =
            None<Screen>();
          = z;
        };

//     loop {
//         turn(&mut rand, &mut game);

//         let player_leve_index = game.get_player().level_index;
//         let num_units = game.levels[player_leve_index].unit_by_location.keys().len();
//         if num_units == 1 {
//             let keep_running = descend_to_next_level(&mut rand, &mut game);
//             if !keep_running {
//                 return;
//             }
//         }

        display(seed, &maybe_screen, &game);

//         if turn_delay > 0 {
//             sleep(Duration::new(turn_delay as u64 / 1000, turn_delay as u32 % 1000 * 1000000));
//         }
//     }

    
  // level = game.levels.get(0).get();  
              // drop(z); // START HERE if we move this down or get rid of it... infinite loop.

  // level.tiles.keys() each (location){
  //   tile? Opt<&Tile> = level.tiles.get(location);
  //   tile = tile?^.get();
  //   println(str(location) + " " + tile.display_class);
  // };

}
