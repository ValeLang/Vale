import v.builtins.panic.*;

interface Opt<T> sealed rules(T Ref) { }
struct Some<T> rules(T Ref) { value T; }
impl<T> Opt<T> for Some<T>;
struct None<T> rules(T Ref) { }
impl<T> Opt<T> for None<T>;

fn isEmpty<T>(virtual opt &Opt<T>) bool abstract;
fn isEmpty<T>(opt &None<T> impl Opt<T>) bool { true }
fn isEmpty<T>(opt &Some<T> impl Opt<T>) bool { false }

fn isEmpty<T>(virtual opt &!Opt<T>) bool abstract;
fn isEmpty<T>(opt &!None<T> impl Opt<T>) bool { true }
fn isEmpty<T>(opt &!Some<T> impl Opt<T>) bool { false }

fn isEmpty<T>(virtual opt Opt<T>) bool abstract;
fn isEmpty<T>(opt None<T> impl Opt<T>) bool { true }
fn isEmpty<T>(opt Some<T> impl Opt<T>) bool { false }

fn get<T>(virtual opt Opt<T>) T abstract;
fn get<T>(opt None<T> impl Opt<T>) T { panic("Called get() on a None!") }
fn get<T>(opt Some<T> impl Opt<T>) T {
  Some<T>(value) = opt;
  = value;
}

fn get<T>(virtual opt &Opt<T>) *T abstract;
fn get<T>(opt &None<T> impl Opt<T>) *T { panic("Called get() on a None!") }
fn get<T>(opt &Some<T> impl Opt<T>) *T { *opt.value }
// Itd be nice to abstract over permission
fn get<T>(virtual opt &!Opt<T>) *!T abstract;
fn get<T>(opt &!None<T> impl Opt<T>) *!T { panic("Called get() on a None!") }
fn get<T>(opt &!Some<T> impl Opt<T>) *!T { *!opt.value }
