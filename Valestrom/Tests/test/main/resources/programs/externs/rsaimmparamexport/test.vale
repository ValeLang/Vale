export Array<imm, int> as ImmIntArray;

fn each<F>(arr A, func F) void
rules(A Ref(_, _, Array<_, _>)) {
  i! = 0;
  l = len(*arr);
  while (i < l) {
    func!(arr[i]);
    set i = i + 1;
  }
}

fn expSumBytes(arr Array<imm, int>) int export {
  sum! = 0;
  each arr (i){ set sum = sum + i; }
  ret sum;
}

fn extSumBytes(arr Array<imm, int>) int extern;

fn main() int export {
  a = [imm *](5, {_});
  ret extSumBytes(a);
}
