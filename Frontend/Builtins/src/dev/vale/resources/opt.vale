import v.builtins.panic.*;

#!DeriveInterfaceDrop
sealed interface Opt<T> where T Ref { }
#!DeriveStructDrop
struct Some<T> where T Ref { value T; }
#!DeriveImplDrop
impl<T> Opt<T> for Some<T>;
#!DeriveStructDrop
struct None<T> where T Ref { }
#!DeriveImplDrop
impl<T> Opt<T> for None<T>;

abstract func drop<T>(virtual opt Opt<T>)
where func drop(T)void;

func drop<T>(opt Some<T>)
where func drop(T)void
{
  [x] = opt;
}

func drop<T>(opt None<T>) {
  [ ] = opt;
}

abstract func isEmpty<T>(virtual opt &Opt<T>) bool;
func isEmpty<T>(opt &None<T>) bool { return true; }
func isEmpty<T>(opt &Some<T>) bool { return false; }

abstract func isEmpty<T>(virtual opt Opt<T>) bool;
func isEmpty<T>(opt None<T>) bool { return true; }
func isEmpty<T>(opt Some<T>) bool { return false; }

abstract func get<T>(virtual opt Opt<T>) T;
func get<T>(opt None<T>) T { panic("Called get() on a None!"); }
func get<T>(opt Some<T>) T {
  [value] = opt;
  return value;
}

abstract func get<T>(virtual opt &Opt<T>) &T;
func get<T>(opt &None<T>) &T { panic("Called get() on a None!"); }
func get<T>(opt &Some<T>) &T { return &opt.value; }
